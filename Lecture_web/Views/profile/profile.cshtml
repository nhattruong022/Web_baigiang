    @model Lecture_web.Models.TaiKhoanModels
    <!-- Profile Content -->
    <div class="dashboard">
      <div class="dashboard-grid">
        <!-- Profile Information -->
        <div class="dashboard-card">
          <div class="card-header">
            <h2>Thông tin cá nhân</h2>
            <button class="btn-primary" onclick="openEditProfileModal()">
              <i class="fas fa-edit"></i>
              Chỉnh sửa
            </button>
          </div>
          <div class="profile-info">
            <div class="profile-avatar">
              @{
              string profileAvatarUrl = "/images/avatars/avatar.jpg"; // Default
              if (!string.IsNullOrEmpty(Model.AnhDaiDien) && !string.IsNullOrWhiteSpace(Model.AnhDaiDien))
              {
              string cleanPath = Model.AnhDaiDien.Trim();
              if (cleanPath.StartsWith("/"))
              {
              profileAvatarUrl = cleanPath;
              }
              else if (cleanPath.StartsWith("images/"))
              {
              profileAvatarUrl = "/" + cleanPath;
              }
              else
              {
              profileAvatarUrl = "/images/avatars/" + cleanPath;
              }
              }
              // Thêm cache buster
              profileAvatarUrl = profileAvatarUrl + "?v=" + DateTime.Now.Ticks;
              }
              <img src="@profileAvatarUrl" alt="Profile Avatar" id="mainProfileAvatar" onerror="handleProfileAvatarError(this)">
              <button class="btn-secondary" onclick="openChangeAvatarModal()">
                <i class="fas fa-camera"></i>
                Đổi ảnh
              </button>
            </div>
            <div class="profile-details">
              <div class="info-group">
                <label>Tên đăng nhập</label>
                <p>@Model.TenDangNhap</p>
              </div>
              <div class="info-group">
                <label>Họ và tên</label>
                <p>@Model.HoTen</p>
              </div>
              <div class="info-group">
                <label>Email</label>
                <p>@Model.Email</p>
              </div>
              <div class="info-group">
                <label>Số điện thoại</label>
                <p>@Model.SoDienThoai</p>
              </div>
              <div class="info-group">
                <label>Vai trò</label>
                <p>@Model.VaiTro</p>
              </div>
            </div>
          </div>
        </div>

        <!-- Security Settings -->
        <div class="dashboard-card">
          <div class="card-header">
            <h2>Bảo mật</h2>
          </div>
          <div class="security-settings">
            <button class="btn-primary" onclick="openChangePasswordModal()">
              <i class="fas fa-key"></i>
              Đổi mật khẩu
            </button>

          </div>
        </div>
      </div>
    </div>
    </main>
    </div>

    <!-- Edit Profile Modal -->
    <div class="modal" id="editProfileModal">
      <div class="modal-content">
        <div class="modal-header">
          <h2>Chỉnh sửa thông tin cá nhân</h2>
          <button class="close-modal" onclick="closeEditProfileModal()">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <form class="modal-form" id="editProfileForm">
          <div class="form-group">
            <label>Họ và tên</label>
            <input type="text" name="HoTen" value="@Model.HoTen" required>
            <div class="field-error" id="error-HoTen"></div>
          </div>
          <!-- Ẩn trường email -->
          <!--<div class="form-group">
            <label>Email</label>
            <input type="email" name="Email" value="@Model.Email" required>
            <div class="field-error" id="error-Email"></div>
          </div>-->
          <div class="form-group">
            <label>Số điện thoại</label>
            <input type="tel" name="SDT" value="@Model.SoDienThoai" required>
            <div class="field-error" id="error-SDT"></div>
          </div>
          <div class="form-actions">
            <button type="button" class="btn-secondary" onclick="closeEditProfileModal()">Hủy</button>
            <button type="submit" class="btn-primary">Lưu thay đổi</button>
          </div>
        </form>
      </div>
    </div>

    <!-- Change Password Modal -->
    <div class="modal" id="changePasswordModal">
      <div class="modal-content">
        <div class="modal-header">
          <h2>Đổi mật khẩu</h2>
          <button class="close-modal" onclick="closeChangePasswordModal()">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <form class="modal-form" id="changePasswordForm">
          <div class="form-group">
            <label>Mật khẩu hiện tại</label>
            <div class="password-input-wrapper">
              <input type="text" name="oldPassword" id="oldPassword" required>
              <button type="button" class="password-toggle" onclick="togglePassword('oldPassword')">
                <i class="fas fa-eye-slash" id="oldPassword-icon"></i>
              </button>
            </div>
          </div>
          <div class="form-group">
            <label>Mật khẩu mới</label>
            <div class="password-input-wrapper">
              <input type="text" name="newPassword" id="newPassword" required>
              <button type="button" class="password-toggle" onclick="togglePassword('newPassword')">
                <i class="fas fa-eye-slash" id="newPassword-icon"></i>
              </button>
            </div>
          </div>
          <div class="form-group">
            <label>Xác nhận mật khẩu mới</label>
            <div class="password-input-wrapper">
              <input type="text" name="confirmPassword" id="confirmPassword" required>
              <button type="button" class="password-toggle" onclick="togglePassword('confirmPassword')">
                <i class="fas fa-eye-slash" id="confirmPassword-icon"></i>
              </button>
            </div>
            <div id="changePasswordMsg" style="margin-top:6px;"></div>
          </div>
          <div class="form-actions">
            <button type="button" class="btn-secondary" onclick="closeChangePasswordModal()">Hủy</button>
            <button type="submit" class="btn-primary">Đổi mật khẩu</button>
          </div>
        </form>
      </div>
    </div>

    <!-- Change Avatar Modal -->
    <div class="modal" id="changeAvatarModal">
      <div class="modal-content">
        <div class="modal-header">
          <h2>Đổi ảnh đại diện</h2>
          <button class="close-modal" onclick="closeChangeAvatarModal()">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <form class="modal-form" id="changeAvatarForm" enctype="multipart/form-data">
          @Html.AntiForgeryToken()
          <div class="form-group">
            <label>Chọn ảnh</label>
            <input type="file" name="avatar" accept="image/jpeg,image/jpg,image/png,image/gif" required>
            <small style="color: #666; font-size: 0.85rem; margin-top: 4px; display: block;">
              Chấp nhận: JPG, JPEG, PNG, GIF. Tối đa 5MB.
            </small>
          </div>
          <div class="form-actions">
            <button type="button" class="btn-secondary" onclick="closeChangeAvatarModal()">Hủy</button>
            <button type="submit" class="btn-primary">Cập nhật ảnh</button>
          </div>
        </form>
      </div>
    </div>

    <style>
      .password-input-wrapper {
        position: relative;
        display: flex;
        align-items: center;
      }

      .password-input-wrapper input {
        flex: 1;
        padding-right: 45px;
      }

      .password-toggle {
        position: absolute;
        right: 10px;
        background: none;
        border: none;
        cursor: pointer;
        color: #666;
        font-size: 16px;
        padding: 5px;
        z-index: 1;
        transition: color 0.3s ease;
      }

      .password-toggle:hover {
        color: #3498db;
      }

      .password-toggle:focus {
        outline: none;
      }

      .profile-avatar {
        text-align: center;
      }

      .profile-avatar img {
        border-radius: 50%;
        border: 3px solid #e0e0e0;
        transition: border-color 0.3s ease;
      }

      .profile-avatar img:hover {
        border-color: #3498db;
      }

      /* Đảm bảo avatar profile luôn hiển thị */
      .profile-avatar img {
        width: 150px !important;
        height: 150px !important;
        display: block !important;
        margin: 0 auto !important;
        visibility: visible !important;
        opacity: 1 !important;
      }

      .form-group input[type="file"] {
        padding: 8px;
        border: 2px dashed #ddd;
        border-radius: 8px;
        background: #f9f9f9;
        transition: border-color 0.3s ease;
      }

      .form-group input[type="file"]:hover {
        border-color: #3498db;
        background: #f0f8ff;
      }

      .form-group input[type="file"]:focus {
        outline: none;
        border-color: #3498db;
        background: #f0f8ff;
      }

      .field-error {
        color: #e74c3c;
        font-size: 0.97rem;
        margin-top: 4px;
        min-height: 18px;
        display: block;
      }

      .profile-success-popup {
        position: fixed;
        top: 30px;
        left: 50%;
        transform: translateX(-50%) scale(0.95);
        background: linear-gradient(90deg, #4caf50 0%, #43e97b 100%);
        color: #fff;
        padding: 16px 32px;
        border-radius: 10px;
        font-size: 1.15rem;
        font-weight: 600;
        box-shadow: 0 8px 32px rgba(76, 175, 80, 0.18);
        z-index: 9999;
        opacity: 0;
        transition: all 0.4s cubic-bezier(.4, 2, .3, 1);
        display: flex;
        align-items: center;
        gap: 10px;
      }

      .profile-success-popup.show {
        opacity: 1;
        transform: translateX(-50%) scale(1);
      }

      .profile-success-popup i {
        font-size: 1.4em;
      }
    </style>

    <script>
      // Function xử lý lỗi avatar profile
      function handleProfileAvatarError(img) {
        console.log('Profile avatar error, falling back to default');
        img.src = '/images/avatars/avatar.jpg?v=' + new Date().getTime();
        img.onerror = null; // Prevent infinite loop
      }

      // Debug và đồng bộ avatar khi trang load
      document.addEventListener('DOMContentLoaded', function() {
        console.log('=== PROFILE PAGE DEBUG START ===');

        // Debug thông tin từ server
        var serverUsername = '@Model.TenDangNhap';
        var serverName = '@Model.HoTen';
        var serverAvatar = '@Model.AnhDaiDien';

        console.log('Server rendered profile data:');
        console.log('- Username:', serverUsername);
        console.log('- Full name:', serverName);
        console.log('- Avatar path:', serverAvatar);

        // LUÔN ƯU TIÊN THÔNG TIN TỪ SERVER
        // Chỉ áp dụng localStorage nếu avatar vừa được upload từ profile page này
        var profileAvatarUpdated = localStorage.getItem('profileAvatarUpdated');
        var updatedUrl = localStorage.getItem('updatedAvatarUrl');

        if (profileAvatarUpdated === 'true' && updatedUrl) {
          console.log('Applying recently uploaded avatar:', updatedUrl);
          var profileAvatar = document.querySelector('.profile-avatar img');
          if (profileAvatar) {
            profileAvatar.src = updatedUrl + '?t=' + new Date().getTime();
          }
          // Clear flag sau khi áp dụng
          localStorage.removeItem('profileAvatarUpdated');
        } else {
          console.log('Using server-rendered avatar');
        }

        // Lắng nghe sự kiện cập nhật avatar
        window.addEventListener('avatarUpdated', function(event) {
          var profileAvatar = document.querySelector('.profile-avatar img');
          if (profileAvatar && event.detail.newAvatarUrl) {
            profileAvatar.src = event.detail.newAvatarUrl + '?t=' + new Date().getTime();
            console.log('Profile avatar updated via event');
          }
        });

        console.log('=== PROFILE PAGE DEBUG END ===');
      });

      // Modal functions
      function openEditProfileModal() {
        document.getElementById('editProfileModal').classList.add('active');
      }

      function closeEditProfileModal() {
        document.getElementById('editProfileModal').classList.remove('active');
      }

      function openChangePasswordModal() {
        document.getElementById('changePasswordModal').classList.add('active');
      }

      function closeChangePasswordModal() {
        document.getElementById('changePasswordModal').classList.remove('active');
      }

      function openChangeAvatarModal() {
        document.getElementById('changeAvatarModal').classList.add('active');
      }

      function closeChangeAvatarModal() {
        document.getElementById('changeAvatarModal').classList.remove('active');
      }

      function logout() {
        if (confirm('Bạn có chắc chắn muốn đăng xuất?')) {
          window.location.href = '/profile/LogOut';
        }
      }

      function toggleUserMenu() {
        document.querySelector('.user-dropdown').classList.toggle('active');
      }

      // Function để toggle hiển thị password
      function togglePassword(fieldId) {
        const passwordField = document.getElementById(fieldId);
        const icon = document.getElementById(fieldId + '-icon');

        if (passwordField.type === 'text') {
          passwordField.type = 'password';
          icon.classList.remove('fa-eye-slash');
          icon.classList.add('fa-eye');
        } else {
          passwordField.type = 'text';
          icon.classList.remove('fa-eye');
          icon.classList.add('fa-eye-slash');
        }
      }

      // Close dropdown when clicking outside
      document.addEventListener('click', function(event) {
        const userProfile = document.querySelector('.user-profile');
        const dropdown = document.querySelector('.user-dropdown');
        if (!userProfile.contains(event.target)) {
          dropdown.classList.remove('active');
        }
      });

      // Submit form chỉnh sửa profile bằng AJAX
      const editProfileForm = document.getElementById('editProfileForm');
      if (editProfileForm) {
        editProfileForm.addEventListener('submit', function(e) {
          e.preventDefault();
          // Xóa lỗi cũ
          ['HoTen', 'Email', 'SDT'].forEach(f => {
            const err = document.getElementById('error-' + f);
            if (err) err.textContent = '';
          });
          const formData = new FormData(editProfileForm);
          fetch('/profile/EditProfilAjax', {
              method: 'POST',
              body: new URLSearchParams([...formData])
            })
            .then(res => res.json())
            .then(data => {
              if (data.success) {
                showSuccessPopup(data.message || 'Cập nhật thành công!');
                setTimeout(() => location.reload(), 1500);
              } else if (data.errors) {
                // Hiển thị lỗi tương ứng
                data.errors.forEach(msg => {
                  if (msg.includes('Họ tên')) document.getElementById('error-HoTen').textContent = msg;
                  if (msg.includes('Email')) document.getElementById('error-Email').textContent = msg;
                  if (msg.includes('Số điện thoại')) document.getElementById('error-SDT').textContent = msg;
                });
              } else if (data.message) {
                alert(data.message);
              }
            });
        });
      }

      // Submit form đổi ảnh đại diện bằng AJAX
      const changeAvatarForm = document.getElementById('changeAvatarForm');
      if (changeAvatarForm) {
        changeAvatarForm.addEventListener('submit', function(e) {
          e.preventDefault();

          console.log('=== AVATAR UPLOAD DEBUG START ===');

          const fileInput = changeAvatarForm.querySelector('input[type="file"]');
          const file = fileInput.files[0];

          console.log('File selected:', file);
          console.log('File name:', file?.name);
          console.log('File size:', file?.size);
          console.log('File type:', file?.type);

          // Validation phía client
          if (!file) {
            alert('Vui lòng chọn file ảnh!');
            return;
          }

          // Kiểm tra loại file
          const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'];
          if (!allowedTypes.includes(file.type)) {
            alert('Chỉ chấp nhận file ảnh (JPG, JPEG, PNG, GIF)!');
            return;
          }

          // Kiểm tra kích thước (5MB = 5 * 1024 * 1024 bytes)
          if (file.size > 5 * 1024 * 1024) {
            alert('File ảnh phải nhỏ hơn 5MB!');
            return;
          }

          const formData = new FormData(changeAvatarForm);
          console.log('FormData created, entries:');
          for (let pair of formData.entries()) {
            console.log(pair[0] + ': ' + pair[1]);
          }

          // Hiển thị loading
          const submitBtn = changeAvatarForm.querySelector('button[type="submit"]');
          const originalText = submitBtn.textContent;
          submitBtn.textContent = 'Đang tải...';
          submitBtn.disabled = true;

          console.log('Starting upload...');

          fetch('/profile/UploadAvatar', {
              method: 'POST',
              body: formData,
              // Không set Content-Type header để browser tự động set với boundary cho multipart
            })
            .then(response => {
              console.log('Response status:', response.status);
              console.log('Response ok:', response.ok);
              return response.json();
            })
            .then(data => {
              console.log('Response data:', data);

              if (data.success) {
                const newAvatarUrl = data.url;
                const timestamp = new Date().getTime();

                console.log('Upload successful! New avatar URL:', newAvatarUrl);

                // Cập nhật avatar trong profile
                const profileAvatar = document.querySelector('.profile-avatar img');
                if (profileAvatar) {
                  profileAvatar.src = newAvatarUrl + '?t=' + timestamp;
                  console.log('Updated profile avatar');
                }

                // Cập nhật avatar trong top bar (nếu có)
                var topBarAvatar = document.getElementById('topBarAvatar');
                if (topBarAvatar) {
                  topBarAvatar.src = newAvatarUrl + '?t=' + timestamp;
                  console.log('Updated top bar avatar');
                }

                // Lưu vào localStorage để sync giữa các tab
                localStorage.setItem('updatedAvatarUrl', newAvatarUrl);
                localStorage.setItem('profileAvatarUpdated', 'true');

                // Dispatch event để notify các component khác
                window.dispatchEvent(new CustomEvent('avatarUpdated', {
                  detail: {
                    newAvatarUrl: newAvatarUrl
                  }
                }));

                // Dispatch user info update event
                window.dispatchEvent(new CustomEvent('userInfoUpdated', {
                  detail: {
                    newAvatarUrl: newAvatarUrl
                  }
                }));

                // Reset form
                changeAvatarForm.reset();
                closeChangeAvatarModal();

                // Hiển thị thông báo thành công
                alert(data.message || 'Cập nhật ảnh đại diện thành công!');

                console.log('=== AVATAR UPLOAD DEBUG END (SUCCESS) ===');

                // Refresh trang để lấy thông tin mới nhất từ server
                setTimeout(function() {
                  window.location.reload();
                }, 1000);
              } else {
                console.error('Upload failed:', data.message);
                alert(data.message || 'Có lỗi xảy ra khi tải ảnh!');
                console.log('=== AVATAR UPLOAD DEBUG END (FAILED) ===');
              }
            })
            .catch(error => {
              console.error('Upload error:', error);
              alert('Có lỗi kết nối khi tải ảnh! Vui lòng thử lại.');
              console.log('=== AVATAR UPLOAD DEBUG END (ERROR) ===');
            })
            .finally(() => {
              // Reset button
              submitBtn.textContent = originalText;
              submitBtn.disabled = false;
            });
        });
      }

      // Submit form đổi mật khẩu bằng AJAX
      const changePasswordForm = document.getElementById('changePasswordForm');
      if (changePasswordForm) {
        changePasswordForm.addEventListener('submit', function(e) {
          e.preventDefault();
          const formData = new FormData(changePasswordForm);
          const oldPassword = formData.get('oldPassword');
          const newPassword = formData.get('newPassword');
          const confirmPassword = formData.get('confirmPassword');
          const msgDiv = document.getElementById('changePasswordMsg');
          msgDiv.innerHTML = '';
          if (newPassword !== confirmPassword) {
            msgDiv.innerHTML = '<span style="color:red">Mật khẩu mới và xác nhận không khớp.</span>';
            return;
          }
          fetch('/profile/ChangePassword', {
              method: 'POST',
              headers: {},
              body: new URLSearchParams({
                oldPassword,
                newPassword
              })
            })
            .then(res => res.json())
            .then(data => {
              if (data.success) {
                msgDiv.innerHTML = '<span style="color:green">' + data.message + '</span>';
                setTimeout(() => {
                  closeChangePasswordModal();
                }, 1500);
              } else {
                msgDiv.innerHTML = '<span style="color:red">' + data.message + '</span>';
              }
            });
        });
      }

      function showSuccessPopup(msg) {
        let popup = document.createElement('div');
        popup.className = 'profile-success-popup';
        popup.innerHTML = `<i class="fas fa-check-circle"></i> ${msg}`;
        document.body.appendChild(popup);
        setTimeout(() => {
          popup.classList.add('show');
        }, 10);
        setTimeout(() => {
          popup.classList.remove('show');
          setTimeout(() => popup.remove(), 400);
        }, 1200);
      }
    </script>