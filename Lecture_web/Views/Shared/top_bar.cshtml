@using System.Security.Claims
@inject Lecture_web.ApplicationDbContext DbContext
@{

var userName = "Guest";
string? avatar = null;
bool hasAvatar = false; // Thêm flag để track có avatar hay không

Console.WriteLine("=== TOP BAR DEBUG START ===");
Console.WriteLine($"User authenticated: {User.Identity?.IsAuthenticated}");

if (User.Identity?.IsAuthenticated == true)
{
try
{
var userIdClaim = User.FindFirstValue(ClaimTypes.NameIdentifier);
var userNameClaim = User.FindFirstValue(ClaimTypes.Name);
var userRoleClaim = User.FindFirstValue(ClaimTypes.Role);

Console.WriteLine($"=== CLAIMS DEBUG ===");
Console.WriteLine($"NameIdentifier: {userIdClaim}");
Console.WriteLine($"Name: {userNameClaim}");
Console.WriteLine($"Role: {userRoleClaim}");
Console.WriteLine($"===================");

if (!string.IsNullOrEmpty(userIdClaim) && int.TryParse(userIdClaim, out int userId))
{
Console.WriteLine($"Looking for user with ID: {userId}");

// Lấy fresh data từ database
using (var scope = DbContext.Database.BeginTransaction())
{
var currentUser = DbContext.TaiKhoan
.Where(u => u.IdTaiKhoan == userId)
.Select(u => new {
u.IdTaiKhoan,
u.TenDangNhap,
u.HoTen,
u.AnhDaiDien,
u.VaiTro,
u.Email
})
.FirstOrDefault();

scope.Rollback(); // Không thay đổi gì, chỉ đọc data

Console.WriteLine($"=== DATABASE RESULT ===");
if (currentUser != null)
{
Console.WriteLine($"Found user: ID={currentUser.IdTaiKhoan}, Username={currentUser.TenDangNhap}, FullName={currentUser.HoTen}");
Console.WriteLine($"Avatar path: {currentUser.AnhDaiDien}");
Console.WriteLine($"Role: {currentUser.VaiTro}");
Console.WriteLine($"Email: {currentUser.Email}");

// Ưu tiên HoTen, sau đó TenDangNhap
userName = !string.IsNullOrEmpty(currentUser.HoTen) ?
currentUser.HoTen :
(currentUser.TenDangNhap ?? "User");

// Xử lý avatar path - CHỈ set khi thực sự có avatar trong DB
if (!string.IsNullOrEmpty(currentUser.AnhDaiDien) && !string.IsNullOrWhiteSpace(currentUser.AnhDaiDien))
{
string cleanPath = currentUser.AnhDaiDien.Trim();
if (cleanPath.StartsWith("/"))
{
avatar = cleanPath;
hasAvatar = true;
}
else if (cleanPath.StartsWith("images/"))
{
avatar = "/" + cleanPath;
hasAvatar = true;
}
else
{
avatar = "/images/" + cleanPath;
hasAvatar = true;
}

Console.WriteLine($"Final avatar path: {avatar}");
}
else
{
avatar = null;
hasAvatar = false; // Rõ ràng không có avatar
Console.WriteLine("No avatar found in database");
}
}
else
{
Console.WriteLine($"ERROR: User with ID {userId} not found in database!");
userName = $"User#{userId}";
avatar = null;
hasAvatar = false;
}
Console.WriteLine($"======================");
}
}
else
{
Console.WriteLine("ERROR: Invalid or missing NameIdentifier claim");
userName = userNameClaim ?? "Unknown";
}
}
catch (Exception ex)
{
Console.WriteLine($"ERROR in top bar: {ex.Message}");
Console.WriteLine($"Stack trace: {ex.StackTrace}");
userName = "Error";
avatar = null;
hasAvatar = false;
}
}
else
{
Console.WriteLine("User not authenticated");
userName = "Guest";
hasAvatar = false;
}

// Final validation
if (string.IsNullOrEmpty(avatar) || string.IsNullOrWhiteSpace(avatar))
{
avatar = null;
hasAvatar = false;
}

if (string.IsNullOrEmpty(userName) || string.IsNullOrWhiteSpace(userName))
{
userName = "User";
}

Console.WriteLine($"=== FINAL VALUES ===");
Console.WriteLine($"UserName: '{userName}'");
Console.WriteLine($"Avatar: '{avatar}'");
Console.WriteLine($"HasAvatar: {hasAvatar}");
Console.WriteLine($"=== TOP BAR DEBUG END ===");
}
<header class="top-bar">

  <!-- Notification Icon - Chỉ hiển thị cho sinh viên -->
  @if (User.Identity.IsAuthenticated && User.FindFirstValue(ClaimTypes.Role) == "Sinhvien")
  {
  <div class="notification-icon" onclick="toggleNotificationDropdown()">
    <i class="fas fa-bell"></i>
    <span class="notification-badge" id="notificationBadge" style="display: none;">0</span>
    <div class="notification-dropdown" id="notificationDropdown" style="display: none;">
      <div class="notification-header">
        <h3>Thông báo từ giảng viên</h3>
        <button onclick="markAllAsRead()" class="mark-all-read-btn">
          <i class="fas fa-check-double"></i> Đánh dấu đã đọc
        </button>
      </div>
      <div class="notification-list" id="notificationList">
        <div class="loading-notifications">
          <i class="fas fa-spinner fa-spin"></i>
          Đang tải thông báo...
        </div>
      </div>

    </div>
  </div>
  }

  <div class="user-menu">
    <div class="user-profile" onclick="toggleUserMenu()">
      @if (hasAvatar && !string.IsNullOrEmpty(avatar))
      {
      <img src="@avatar?v=@DateTime.Now.Ticks&r=@Random.Shared.Next()" alt="Avatar @userName" class="avatar" id="topBarAvatar" onerror="handleAvatarError(this)" style="border-radius: 50%; object-fit: cover; width: 40px; height: 40px; display: block;" data-has-avatar="true">
      }
      else
      {
      <!-- Hiển thị avatar mặc định khi không có trong DB -->
      <img src="/images/avatars/avatar.jpg?v=@DateTime.Now.Ticks" alt="Avatar @userName" class="avatar" id="topBarAvatar" onerror="handleAvatarError(this)" style="border-radius: 50%; object-fit: cover; width: 40px; height: 40px; display: block;" data-has-avatar="false">
      }
      <span class="user-name" id="topBarUserName">@userName</span>
      <i class="fas fa-chevron-down"></i>
      <div class="user-dropdown">
        <a href="/profile/profile">
          <i class="fas fa-user"></i>
          Thông tin cá nhân
        </a>

        <div class="dropdown-divider"></div>
        <a href="/profile/LogOut">
          <i class="fas fa-sign-out-alt"></i>
          Đăng xuất
        </a>
      </div>
    </div>
  </div>
</header>

<style>
  /* Đảm bảo avatar luôn hiển thị */
  .avatar,
  .student-avatar,
  .comment-avatar,
  .notice-avatar {
    display: block !important;
    border-radius: 50% !important;
    object-fit: cover !important;
  }

  .top-bar .avatar {
    width: 40px !important;
    height: 40px !important;
  }

  .student-avatar {
    width: 52px !important;
    height: 52px !important;
  }

  .comment-avatar,
  .notice-avatar {
    width: 40px !important;
    height: 40px !important;
  }

  /* Fix any potential CSS conflicts */
  .user-profile img {
    visibility: visible !important;
    opacity: 1 !important;
  }

  /* Notification Icon Styles */
  .notification-icon {
    position: relative;
    cursor: pointer;
    padding: 8px;
    border-radius: 50%;
    transition: background-color 0.2s;
    margin-right: 15px;
  }

  .notification-icon:hover {
    background-color: rgba(0, 0, 0, 0.05);
  }

  .notification-icon i {
    font-size: 20px;
    color: #666;
  }

  .notification-badge {
    position: absolute;
    top: 0;
    right: 0;
    background-color: #e74c3c;
    color: white;
    font-size: 11px;
    font-weight: bold;
    padding: 2px 6px;
    border-radius: 10px;
    min-width: 18px;
    text-align: center;
    line-height: 14px;
    border: 2px solid white;
    animation: pulse 2s infinite;
  }

  .notification-dropdown {
    position: absolute;
    top: 100%;
    right: 0;
    width: 350px;
    max-height: 400px;
    background: white;
    border-radius: 8px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
    z-index: 1000;
    margin-top: 10px;
    overflow: hidden;
  }

  .notification-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 20px;
    border-bottom: 1px solid #eee;
    background: #f8f9fa;
  }

  .notification-header h3 {
    margin: 0;
    font-size: 16px;
    font-weight: 600;
    color: #333;
  }

  .mark-all-read-btn {
    background: none;
    border: none;
    color: #007bff;
    font-size: 12px;
    cursor: pointer;
    padding: 5px 10px;
    border-radius: 4px;
    transition: background-color 0.2s;
  }

  .mark-all-read-btn:hover {
    background-color: rgba(0, 123, 255, 0.1);
  }

  .notification-list {
    max-height: 300px;
    overflow-y: auto;
  }

  .loading-notifications {
    padding: 20px;
    text-align: center;
    color: #666;
  }

  .notification-item {
    padding: 12px 20px;
    border-bottom: 1px solid #f0f0f0;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .notification-item:hover {
    background-color: #f8f9fa;
  }

  .notification-item.unread {
    background-color: #f0f8ff;
  }

  .notification-item.unread:hover {
    background-color: #e6f3ff;
  }

  .notification-content {
    margin-bottom: 5px;
    font-size: 14px;
    color: #333;
    line-height: 1.4;
  }

  .notification-time {
    font-size: 12px;
    color: #999;
  }

  .notification-footer {
    padding: 12px 20px;
    border-top: 1px solid #eee;
    text-align: center;
  }

  .notification-footer a {
    color: #007bff;
    text-decoration: none;
    font-size: 14px;
  }

  .notification-footer a:hover {
    text-decoration: underline;
  }

  .no-notifications {
    padding: 20px;
    text-align: center;
    color: #666;
  }

  .no-notifications i {
    font-size: 24px;
    margin-bottom: 8px;
    color: #ddd;
  }
</style>

<style>
  /* Keyframes animation */
  @@keyframes pulse {
    0% {
      transform: scale(1);
    }

    50% {
      transform: scale(1.1);
    }

    100% {
      transform: scale(1);
    }
  }

  /* Responsive */
  @@media (max-width: 768px) {
    .notification-dropdown {
      width: 300px;
      right: -50px;
    }
  }

  @@media (max-width: 480px) {
    .notification-dropdown {
      width: 280px;
      right: -80px;
    }
  }
</style>

<script>
  // Function xử lý lỗi avatar - fallback về avatar mặc định
  function handleAvatarError(img) {
    console.log('Avatar error occurred');

    // Luôn fallback về avatar mặc định khi có lỗi
    console.log('Avatar failed to load, falling back to default');
    img.src = '/images/avatars/avatar.jpg?v=' + new Date().getTime();
    img.onerror = null; // Prevent infinite loop
  }

  // Force refresh user info and avatar
  function refreshUserInfo() {
    console.log('Refreshing user info...');

    // Force reload page to get fresh user data from server
    if (performance.navigation.type !== 1) { // Only if not already refreshed
      setTimeout(function() {
        window.location.reload(true);
      }, 500);
    }
  }

  // Notification functions - Chỉ cho sinh viên
  let notificationDropdownOpen = false;
  let notificationCount = 0;
  let notificationHubConnection = null;

  function toggleNotificationDropdown() {
    const dropdown = document.getElementById('notificationDropdown');
    const badge = document.getElementById('notificationBadge');

    if (!dropdown || !badge) {
      console.log('Notification elements not found - user might not be a student');
      return;
    }

    if (notificationDropdownOpen) {
      dropdown.style.display = 'none';
      notificationDropdownOpen = false;
    } else {
      dropdown.style.display = 'block';
      notificationDropdownOpen = true;
      loadNotifications();
    }
  }

  function loadNotifications() {
    const notificationList = document.getElementById('notificationList');

    if (!notificationList) {
      console.log('Notification list not found');
      return;
    }

    // Hiển thị loading
    notificationList.innerHTML = `
      <div class="loading-notifications">
        <i class="fas fa-spinner fa-spin"></i>
        Đang tải thông báo...
      </div>
    `;

    // Gọi API để lấy danh sách thông báo
    fetch('/User/ThongBao/GetRecentNotifications?limit=5')
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          if (data.notifications && data.notifications.length > 0) {
            const notificationsHtml = data.notifications.map(notification => `
              <div class="notification-item" onclick="viewNotification(${notification.idThongBao}, ${notification.idLopHocPhan})">
                <div class="notification-content">
                  <div style="font-weight: 500; margin-bottom: 4px; color: #007bff;">
                    ${notification.tenGiangVien} - ${notification.tenLopHocPhan}
                  </div>
                  <div style="font-size: 13px; color: #666; line-height: 1.3;">
                    ${notification.noiDung.length > 100 ? notification.noiDung.substring(0, 100) + '...' : notification.noiDung}
                  </div>
                </div>
                <div class="notification-time">${notification.timeAgo}</div>
              </div>
            `).join('');

            notificationList.innerHTML = notificationsHtml;
          } else {
            notificationList.innerHTML = `
              <div class="no-notifications">
                <i class="fas fa-bell-slash"></i>
                <div>Không có thông báo mới từ giảng viên</div>
              </div>
            `;
          }
        } else {
          notificationList.innerHTML = `
            <div class="no-notifications">
              <i class="fas fa-exclamation-triangle"></i>
              <div>Không thể tải thông báo</div>
            </div>
          `;
        }
      })
      .catch(error => {
        console.error('Error loading notifications:', error);
        notificationList.innerHTML = `
          <div class="no-notifications">
            <i class="fas fa-exclamation-triangle"></i>
            <div>Lỗi kết nối</div>
          </div>
        `;
      });
  }

  function updateNotificationBadge(count) {
    const badge = document.getElementById('notificationBadge');
    if (badge) {
      badge.textContent = count;
      badge.style.display = count > 0 ? 'block' : 'none';
    }
  }

  function markAllAsRead() {
    fetch('/User/ThongBao/MarkAllAsRead', {
        method: 'POST'
      })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          updateNotificationBadge(0);
          loadNotifications();
        } else {
          alert(data.message || 'Lỗi khi đánh dấu đã đọc');
        }
      });
  }

  function viewNotification(notificationId, idLopHocPhan) {
    // Đánh dấu đã đọc thông báo này
    fetch('/User/ThongBao/MarkAsRead?id=' + notificationId, {
        method: 'POST'
      })
      .then(res => res.json())
      .then(data => {
        loadNotificationCount();
        // Đóng dropdown và chuyển trang
        toggleNotificationDropdown();
        if (idLopHocPhan) {
          window.location.href = `/User/ChiTietHocPhan/Index/${idLopHocPhan}?tab=thongbao`;
        } else {
          alert('Không tìm thấy lớp học phần của thông báo này!');
        }
      })
      .catch(() => {
        // Nếu lỗi vẫn chuyển trang
        toggleNotificationDropdown();
        if (idLopHocPhan) {
          window.location.href = `/User/ChiTietHocPhan/Index/${idLopHocPhan}?tab=thongbao`;
        } else {
          alert('Không tìm thấy lớp học phần của thông báo này!');
        }
      });
  }

  function viewAllNotifications() {
    window.location.href = '/User/ChiTietHocPhan/Index/${idLopHocPhan}?tab=thongbao';
  }

  // Đóng dropdown khi click bên ngoài
  document.addEventListener('click', function(event) {
    const notificationIcon = document.querySelector('.notification-icon');
    const dropdown = document.getElementById('notificationDropdown');

    if (notificationIcon && dropdown && !notificationIcon.contains(event.target) && !dropdown.contains(event.target)) {
      dropdown.style.display = 'none';
      notificationDropdownOpen = false;
    }
  });

  function getUserClasses() {
    // Có thể implement để lấy danh sách lớp học phần từ server
    // Tạm thời return empty array, sẽ được cập nhật sau
    return [];
  }

  async function loadUserClasses() {
    try {
      const response = await fetch('/User/ThongBao/GetUserClasses');
      const data = await response.json();

      if (data.success && data.classes) {
        return data.classes.map(cls => cls.IdLopHocPhan);
      }
    } catch (error) {
      console.error('Error loading user classes:', error);
    }
    return [];
  }

  // SignalR connection for real-time notifications
  async function connectNotificationHub() {
    if (typeof signalR !== 'undefined') {
      notificationHubConnection = new signalR.HubConnectionBuilder()
        .withUrl("/notificationHub")
        .build();

      notificationHubConnection.on("NewNotification", function(notification) {
        fetch('/User/ThongBao/ClearReadSession', {
            method: 'POST'
          })
          .then(res => res.json())
          .then(data => {
            loadNotificationCount();
          })
          .catch(() => {
            loadNotificationCount();
          });
        showToastNotification(notification);
      });

      notificationHubConnection.start().then(async function() {
        console.log('Notification hub connected');

        // Kết nối với các lớp học phần mà sinh viên tham gia
        const userClasses = await loadUserClasses();
        userClasses.forEach(classId => {
          notificationHubConnection.invoke("JoinClass", classId.toString());
          console.log('Joined class:', classId);
        });
      }).catch(function(err) {
        console.error('Error connecting to notification hub:', err);
      });
    }
  }

  function showToastNotification(notification) {
    // Tạo toast notification
    const toast = document.createElement('div');
    toast.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: #007bff;
      color: white;
      padding: 15px 20px;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      z-index: 10000;
      max-width: 300px;
      font-size: 14px;
      line-height: 1.4;
      transform: translateX(100%);
      transition: transform 0.3s ease;
    `;

    toast.innerHTML = `
      <div style="font-weight: 500; margin-bottom: 5px;">
        ${notification.TenGiangVien || 'Giảng viên'} - ${notification.TenLopHocPhan || 'Lớp học'}
      </div>
      <div style="font-size: 13px; opacity: 0.9;">
        ${notification.TieuDe || 'Thông báo mới'}
      </div>
    `;

    document.body.appendChild(toast);

    // Hiển thị toast
    setTimeout(() => {
      toast.style.transform = 'translateX(0)';
    }, 100);

    // Tự động ẩn sau 5 giây
    setTimeout(() => {
      toast.style.transform = 'translateX(100%)';
      setTimeout(() => {
        if (document.body.contains(toast)) {
          document.body.removeChild(toast);
        }
      }, 300);
    }, 5000);
  }

  function loadNotificationCount() {
    fetch('/User/ThongBao/GetUnreadCount')
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          updateNotificationBadge(data.count);
        }
      })
      .catch(err => {
        console.error('Lỗi khi tải số lượng thông báo:', err);
      });
  }

  // Load trang và kiểm tra avatar
  document.addEventListener('DOMContentLoaded', function() {
    console.log('=== TOP BAR JAVASCRIPT START ===');

    var topBarAvatar = document.getElementById('topBarAvatar');
    var topBarUserName = document.getElementById('topBarUserName');

    // Debug current values from server
    console.log('Server rendered - User name:', topBarUserName?.textContent);
    console.log('Server rendered - Avatar element exists:', !!topBarAvatar);

    // Xử lý avatar element (luôn có avatar element bây giờ)
    if (topBarAvatar) {
      console.log('Avatar element found');
      var hasAvatarInDb = topBarAvatar.getAttribute('data-has-avatar') === 'true';
      console.log('Has avatar in DB:', hasAvatarInDb);

      if (hasAvatarInDb) {
        // Có avatar trong DB - ưu tiên thông tin từ server
        // Chỉ áp dụng localStorage cho avatar nếu nó được set từ profile upload
        var updatedAvatarFromProfile = localStorage.getItem('profileAvatarUpdated');
        var updatedUrl = localStorage.getItem('updatedAvatarUrl');

        if (updatedAvatarFromProfile === 'true' && updatedUrl) {
          console.log('Applying avatar from recent profile update:', updatedUrl);
          topBarAvatar.src = updatedUrl + '?t=' + new Date().getTime();

          // Clear flag sau khi áp dụng
          localStorage.removeItem('profileAvatarUpdated');
        }
      } else {
        // Không có avatar trong DB - đang dùng avatar mặc định
        console.log('Using default avatar');
      }

      // Kiểm tra avatar có load được không
      if (topBarAvatar.src) {
        var img = new Image();
        img.onload = function() {
          console.log('Avatar loaded successfully');
        };
        img.onerror = function() {
          console.log('Avatar failed to load, using default');
          handleAvatarError(topBarAvatar);
        };
        img.src = topBarAvatar.src;
      }
    } else {
      console.log('No avatar element found');
    }

    // Load notification count chỉ cho sinh viên
    const notificationBadge = document.getElementById('notificationBadge');
    if (notificationBadge) {
      console.log('Student detected, loading notification count');
      loadNotificationCount();
      connectNotificationHub();
    } else {
      console.log('Not a student, skipping notification features');
    }

    console.log('=== TOP BAR JAVASCRIPT END ===');
  });

  // Lắng nghe sự kiện cập nhật avatar từ profile
  window.addEventListener('avatarUpdated', function(event) {
    console.log('Avatar update event received:', event.detail);

    if (event.detail.newAvatarUrl) {
      var topBarAvatar = document.getElementById('topBarAvatar');

      if (topBarAvatar) {
        var timestamp = new Date().getTime();
        topBarAvatar.src = event.detail.newAvatarUrl + '?t=' + timestamp;
        topBarAvatar.setAttribute('data-has-avatar', 'true');
        console.log('Top bar avatar updated via event:', event.detail.newAvatarUrl);

        // Set flag để indicate avatar đã được update từ profile
        localStorage.setItem('profileAvatarUpdated', 'true');

        // Refresh page để cập nhật thông tin user từ server
        setTimeout(refreshUserInfo, 1000);
      }
    }
  });

  // Lắng nghe storage events để sync giữa các tab
  window.addEventListener('storage', function(event) {
    if (event.key === 'updatedAvatarUrl' && event.newValue) {
      var topBarAvatar = document.getElementById('topBarAvatar');
      if (topBarAvatar) {
        topBarAvatar.src = event.newValue + '?t=' + new Date().getTime();
        topBarAvatar.setAttribute('data-has-avatar', 'true');
        console.log('Avatar updated from storage:', event.newValue);

        // Set flag để indicate avatar đã được update từ profile
        localStorage.setItem('profileAvatarUpdated', 'true');
      }
    }
  });

  // Lắng nghe sự kiện user info thay đổi
  window.addEventListener('userInfoUpdated', function(event) {
    console.log('User info update event received');
    refreshUserInfo();
  });

  // Auto refresh notification count every 30 seconds (chỉ cho sinh viên)
  setInterval(function() {
    const notificationBadge = document.getElementById('notificationBadge');
    if (notificationBadge) {
      loadNotificationCount();
    }
  }, 30000);
</script>