@{
ViewData["Title"] = "Chi tiết học phần";
var userRole = ViewBag.UserRole as string;
<link rel="stylesheet" href="~/css/chitiethocphan.css" />
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
}

@* CSRF Token for AJAX calls *@
@Html.AntiForgeryToken()

<div class="app-container">
  <div class="header-row" style="display: flex; align-items: center; gap: 16px; margin: 24px 24px 0 32px;">
    <a style="text-decoration: none; color: #22334d;" href="/User/LopHoc/Index" class="back-btn">
      <i class="fas fa-arrow-left"></i> Quay lại
    </a>
    <div class="course-tabs">
      <button class="course-tab-btn active" onclick="showTab('lessons', this)"><i class="fas fa-book"></i> Bài giảng</button>
      <button class="course-tab-btn" onclick="showTab('students', this)"><i class="fas fa-users"></i> Danh sách sinh viên</button>
      <button class="course-tab-btn" onclick="showTab('notices', this)"><i class="fas fa-bell"></i> Thông báo</button>
    </div>
  </div>
  <div class="main-box" style="background: #fff; border-radius: 18px; box-shadow: 0 4px 24px rgba(52,152,219,0.10), 0 1.5px 8px rgba(0,0,0,0.08); border: 1.5px solid #bfc9d1; overflow: hidden; margin: 16px 24px 0 24px; display: flex; flex-direction: row; min-height: 650px;">
    <!-- Sidebar chương & bài -->
    <aside class="sidebar-chapters" style="border-radius: 0; min-height: 100%; height: 100%; box-shadow: none; margin: 0; width: 260px;">
      <h2>Chương & Bài</h2>
      <ul class="chapter-list">
        @{
        var chuongs = ViewBag.Chuongs as List<dynamic>;
          }
          @if (chuongs != null && chuongs.Any())
          {
          @for (int chapterIdx = 0; chapterIdx

          < chuongs.Count; chapterIdx++) { var chuong=chuongs[chapterIdx]; <li class="chapter @(chapterIdx == 0 ? " open" : "" )">
            <button class="chapter-title @(chapterIdx == 0 ? " active" : "" )" onclick="toggleChapter(this)">
              @chuong.TenChuong
              <i class="fas fa-chevron-down" style="margin-left:auto"></i>
            </button>
            <ul class="lesson-list">
              @if (chuong.Bais != null)
              {
              @for (int lessonIdx = 0; lessonIdx

              < ((List<dynamic>)chuong.Bais).Count; lessonIdx++)
                {
                var bai = ((List<dynamic>)chuong.Bais)[lessonIdx];
                  <li>
                    <button class="lesson-btn @(chapterIdx == 0 && lessonIdx == 0 ? " active" : "" )" onclick="showLesson(@chapterIdx, @lessonIdx)">
                      @bai.TieuDeBai
                    </button>
                  </li>
                  }
                  }
            </ul>
            </li>
            }
            }
            else
            {
            <li style="padding: 20px; text-align: center; color: #666;">
              <i class="fas fa-book" style="font-size: 24px; margin-bottom: 8px; display: block;"></i>
              Chưa có chương nào được tạo
            </li>
            }
      </ul>
    </aside>
    <div style="flex:1;display:flex;flex-direction:column;min-height: 600px;">
      <!-- Tab Contents -->
      <section class="main-lesson-content course-tab-content" id="tab-lessons" style="display:block;">
        <!-- Nội dung bài sẽ được render ở đây -->
      </section>
      <section class="main-lesson-content course-tab-content" id="tab-students" style="display:none;">
        <div class="management-header">
          <div class="search-filter">
            <select>
              <option>Tất cả vai trò</option>
              <option>Sinh viên</option>
              <option>Giảng viên</option>
            </select>
            <select>
              <option>Tất cả trạng thái</option>
              <option>Hoạt động</option>
              <option>Không hoạt động</option>
            </select>
          </div>
          <div style="display:flex; align-items:center; gap:12px;">
            <div class="search-box">
              <i class="fas fa-search"></i>
              <input type="text" placeholder="Tìm kiếm sinh viên...">
            </div>
            @if (userRole != "Sinhvien")
            {
            <button onclick="openInviteStudentModal()" style="background: #007bff; color: white; border: none; padding: 8px 12px; border-radius: 6px; cursor: pointer; display: flex; align-items: center; justify-content: center;" title="Mời sinh viên">
              <i class="fas fa-plus"></i>
            </button>
            }
          </div>
        </div>
        <div class="student-table">
          <table>
            <thead>
              <tr>
                <th>Tên đăng nhập</th>
                <th>Họ và tên</th>
                <th>Vai trò</th>
                <th>Email</th>
                <th>Số điện thoại</th>
                <th>Ảnh đại diện</th>
                <th>Trạng thái</th>
                @if (userRole != "Sinhvien")
                {
                <th>Thao tác</th>
                }
              </tr>
            </thead>
            <tbody id="studentsTableBody">
              @{
              var studentsInClass = ViewBag.StudentsInClass as IEnumerable<dynamic>;
                }

                <!-- DEBUG: Kiểm tra data sinh viên -->
                @if (ViewBag.StudentsInClass != null)
                {
                <script>
                  console.log('StudentsInClass data:', @Html.Raw(Json.Serialize(ViewBag.StudentsInClass)));
                </script>
                }

                @if (studentsInClass != null && studentsInClass.Any())
                {
                @foreach (var student in studentsInClass)
                {
                <tr>
                  <td>@student.TenDangNhap</td>
                  <td>@student.HoTen</td>
                  <td>@(student.VaiTro == "Sinhvien" ? "Sinh viên" : student.VaiTro)</td>
                  <td>@student.Email</td>
                  <td>@(student.SoDienThoai ?? "Chưa cập nhật")</td>
                  <td>
                    @if (!string.IsNullOrEmpty(student.AnhDaiDien))
                    {
                    <img style="width:52px; height:52px; border-radius:50%;" src="@(!string.IsNullOrEmpty(student.AnhDaiDien) ? student.AnhDaiDien : " /images/avatar.jpg")" class="student-avatar" />
                    }
                    else
                    {
                    <img style="width:52px; height:52px; border-radius:50%;" src="/images/avatar.jpg" class="student-avatar" />
                    }
                  </td>
                  <td><span class="status-badge @(student.TrangThai == " HoatDong" ? "hoatdong" : "" )">@(student.TrangThai == "HoatDong" ? "Hoạt động" : (student.TrangThai ?? "Chưa cập nhật"))</span></td>
                  @if (userRole != "Sinhvien")
                  {
                  <td>
                    <button class="btn-icon" onclick="openEditStudentModal(this)"><i class="fas fa-edit"></i></button>
                    <button class="btn-icon" onclick="openConfirmDeleteStudentModal(this)"><i class="fas fa-trash"></i></button>
                  </td>
                  }
                </tr>
                }
                }
                else
                {
                <tr>
                  <td colspan="@(userRole != " Sinhvien" ? "8" : "7" )" style="text-align: center; padding: 20px; color: #666;">
                    <i class="fas fa-users" style="font-size: 24px; margin-bottom: 8px; display: block;"></i>
                    Chưa có sinh viên nào trong lớp học này
                    @if (userRole != "Sinhvien")
                    {
                    <div style="margin-top: 12px;">
                      <button onclick="openInviteStudentModal()" style="background: #007bff; color: white; border: none; padding: 8px 16px; border-radius: 6px; cursor: pointer;">
                        <i class="fas fa-plus"></i> Mời sinh viên tham gia
                      </button>
                    </div>
                    }
                  </td>
                </tr>
                }
            </tbody>
          </table>
        </div>
        <!-- Phân trang -->
        <div class="pagination">
          <button>&lt;</button>
          <button class="active">1</button>
          <button>2</button>
          <button>3</button>
          <button>&gt;</button>
        </div>

        <!-- Popup Mời học viên -->
        @if (userRole != "Sinhvien")
        {
        <div class="modal" id="inviteStudentModal" style="display:none; position:fixed; z-index:1000; left:0; top:0; width:100vw; height:100vh; background:rgba(44,62,80,0.18); justify-content:center; align-items:center;">
          <div class="modal-content" style="background:#fff; border-radius:14px; box-shadow:0 8px 32px rgba(52,152,219,0.18),0 1.5px 8px rgba(0,0,0,0.08); padding:0; width:420px; max-width:90vw; position:relative; overflow:hidden;">
            <div class="modal-header" style="background:#fff; padding:20px 24px 16px 24px; border-bottom:1px solid #e5e5e5;">
              <h2 style="font-size:1.2rem; font-weight:600; color:#333; margin:0;">Mời học viên</h2>
              <button onclick="closeInviteStudentModal()" style="position:absolute; top:16px; right:20px; background:none; border:none; font-size:1.3rem; color:#666; cursor:pointer;"><i class="fas fa-times"></i></button>
            </div>
            <div class="modal-body" style="padding:20px 24px;">
              <div style="margin-bottom:16px;">
                <input type="text" id="searchStudentEmail" placeholder="Tìm kiếm theo email..." style="width:100%; padding:12px 16px; border:1px solid #ddd; border-radius:8px; font-size:1rem; outline:none;" oninput="searchStudent(this.value)">
              </div>

              <!-- Hiển thị sinh viên đã chọn -->
              <div id="selectedStudentsContainer" style="margin-bottom:16px; display:none;">
                <h4 style="font-size:0.9rem; color:#333; margin-bottom:8px;">Sinh viên đã chọn:</h4>
                <div id="selectedStudentsList" style="max-height:100px; overflow-y:auto; border:1px solid #e0e0e0; border-radius:6px; padding:8px;">
                  <!-- Selected students will be displayed here -->
                </div>
                <div style="margin-top:8px; text-align:right;">
                  <button type="button" onclick="clearSelectedStudents()" style="background:none; border:1px solid #ddd; color:#666; padding:4px 8px; border-radius:4px; font-size:0.8rem; cursor:pointer;">Xóa tất cả chọn</button>
                </div>
              </div>

              <div id="searchResults" style="max-height:200px; overflow-y:auto;">
                <!-- Kết quả tìm kiếm sẽ hiển thị ở đây -->
              </div>
              <div style="color:#666; font-size:0.9rem; margin-top:12px; text-align:center;">
                Tìm kiếm và chọn nhiều sinh viên để mời cùng lúc
              </div>
            </div>
            <div class="modal-footer" style="padding:16px 24px; background:#f8f9fa; display:flex; justify-content:space-between; align-items:center;">
              <div id="selectedCount" style="font-size:0.9rem; color:#666;">
                Đã chọn: <span id="selectedCountNumber">0</span> sinh viên
              </div>
              <div style="display:flex; gap:12px;">
                <button type="button" onclick="closeInviteStudentModal()" style="padding:8px 20px; border:1px solid #ddd; background:#fff; color:#666; border-radius:6px; font-size:0.95rem; cursor:pointer;">Hủy</button>
                <button type="button" onclick="inviteSelectedStudent()" id="inviteButton" style="padding:8px 20px; background:#007bff; color:#fff; border:none; border-radius:6px; font-size:0.95rem; cursor:pointer;" disabled>Mời</button>
              </div>
            </div>
          </div>
        </div>
        }

        <!-- Popup chỉnh sửa sinh viên -->
        @if (userRole != "Sinhvien")
        {
        <div class="modal" id="editStudentModal" style="display:none; position:fixed; z-index:1001; left:0; top:0; width:100vw; height:100vh; background:rgba(44,62,80,0.18); justify-content:center; align-items:center;">
          <div class="modal-content add-student-modal-content">
            <div class="modal-header" style="display:flex; align-items:center; justify-content:space-between; border-bottom:1px solid #e0e6ed; padding-bottom:18px; margin-bottom:24px;">
              <h2 style="font-size:1.35rem; font-weight:700; color:#22334d; margin:0;">Chỉnh sửa sinh viên</h2>
              <button onclick="closeEditStudentModal()" style="background:none; border:none; font-size:1.3rem; color:#888; cursor:pointer;"><i class="fas fa-times"></i></button>
            </div>
            <form id="editStudentForm" onsubmit="submitEditStudent(event)">
              <div class="form-group">
                <label for="editStudentUsername">Tên đăng nhập</label>
                <input type="text" id="editStudentUsername" required>
              </div>
              <div class="form-group">
                <label for="editStudentName">Họ và tên</label>
                <input type="text" id="editStudentName" required>
              </div>
              <div class="form-group">
                <label for="editStudentRole">Vai trò</label>
                <select id="editStudentRole" required>
                  <option value="student">Sinh viên</option>
                  <option value="teacher">Giảng viên</option>
                </select>
              </div>
              <div class="form-group">
                <label for="editStudentEmail">Email</label>
                <input type="email" id="editStudentEmail" required>
              </div>
              <div class="form-group">
                <label for="editStudentPhone">Số điện thoại</label>
                <input type="text" id="editStudentPhone">
              </div>
              <div class="form-group">
                <label for="editStudentAvatar">Ảnh đại diện</label>
                <input type="file" id="editStudentAvatar" accept="image/*">
              </div>
              <div class="form-group">
                <label for="editStudentStatus">Trạng thái</label>
                <select id="editStudentStatus" required>
                  <option value="hoatdong">Hoạt động</option>
                  <option value="khonghoatdong">Không hoạt động</option>
                </select>
              </div>
              <div class="form-actions modal-actions">
                <button type="button" onclick="closeEditStudentModal()" class="btn-cancel">Hủy</button>
                <button type="submit" class="btn-primary">Lưu</button>
              </div>
            </form>
          </div>
        </div>
        }
        <!-- Modal xác nhận xóa sinh viên -->
        @if (userRole != "Sinhvien")
        {
        <div class="modal" id="confirmDeleteStudentModal" style="display:none; position:fixed; z-index:1002; left:0; top:0; width:100vw; height:100vh; background:rgba(44,62,80,0.18); justify-content:center; align-items:center;">
          <div class="modal-content" style="min-width:350px; max-width:400px; background:#fff; border-radius:14px; box-shadow:0 8px 32px rgba(52,152,219,0.18),0 1.5px 8px rgba(0,0,0,0.08); padding:32px 28px 24px 28px; position:relative; display:flex; flex-direction:column; align-items:center;">
            <h2 style="font-size:1.2rem; font-weight:600; color:#22334d; margin-bottom:18px; text-align:center;">Xác nhận xóa sinh viên?</h2>
            <div style="display:flex; justify-content:center; gap:16px; margin-top:18px;">
              <button type="button" onclick="closeConfirmDeleteStudentModal()" class="btn-cancel">Hủy</button>
              <button type="button" onclick="confirmDeleteStudent()" class="btn-primary" style="background:#e74c3c; border:none;">Xóa</button>
            </div>
          </div>
        </div>
        }
      </section>
      <section class="main-lesson-content course-tab-content" id="tab-notices" style="display:none;">
        <div class="notice-card">
          <div class="notice-header">
            <img src="/images/avatar.jpg" alt="Avatar" class="notice-avatar">
            <div class="notice-info">
              <div class="notice-author">ND Duy</div>
              <div class="notice-time">3 thg 6</div>
            </div>
            <button class="notice-menu" onclick="toggleNoticeMenu(this)"><i class="fas fa-ellipsis-v"></i></button>
            @if (userRole == null || userRole.ToLower() != "sinhvien")
            {
            <div class="notice-menu-popup" style="display:none; position:absolute; right:24px; top:48px; background:#fff; box-shadow:0 2px 8px rgba(44,62,80,0.12); border-radius:8px; min-width:160px; z-index:10;">
              <button onclick="addNotice()" class="notice-menu-item">Thêm thông báo</button>
              <button onclick="editNotice(this)" class="notice-menu-item">Sửa thông báo</button>
              <button onclick="deleteNotice(this)" class="notice-menu-item" style="color:#e74c3c;">Xóa thông báo</button>
            </div>
            }
          </div>
          <div class="notice-body">
            <div style="white-space:normal;word-break:break-word;overflow-wrap:break-word;">
              Các nhóm lưu ý,<br>
              Không share tài liệu đồ án nhóm mình cho các nhóm khác (các nhóm không do Thầy hướng dẫn). Thầy đã cố gắng tạo các tài liệu cho khác nhau giữa các nhóm -> chia sẻ cho các bạn sẽ tạo ra những báo cáo giống nhau. Các em public ra -> sẽ bị các giáo viên, sinh viên khác biết Thầy tạo tài liệu cho các nhóm hướng dẫn -> fail chắc!<br>
              T.Duy<br>
              P/s: Vì có nhiều mail của các bạn không có trong nhóm -> yêu cầu quyền truy cập cái file Thầy gửi -> chứng tỏ trong nhóm có bạn share link.
            </div>
          </div>
          <div class="notice-comment">
            <img src="/images/avatar.jpg" alt="Avatar" class="comment-avatar">
            <input type="text" placeholder="Thêm nhận xét trong lớp học...">
            <button class="comment-send"><i class="fas fa-paper-plane"></i></button>
          </div>
        </div>
        <div class="notice-card">
          <div class="notice-header">
            <img src="/images/avatar.jpg" alt="Avatar" class="notice-avatar">
            <div class="notice-info">
              <div class="notice-author">Nguyễn Văn B</div>
              <div class="notice-time">1 thg 6</div>
            </div>
            <button class="notice-menu"><i class="fas fa-ellipsis-v"></i></button>
          </div>
          <div class="notice-body">
            <div style="white-space:normal;word-break:break-word;overflow-wrap:break-word;">
              Lịch học tuần này chuyển sang phòng B203.<br>
              Các bạn chú ý đến đúng giờ!
            </div>
          </div>
          <div class="notice-comment">
            <img src="/images/avatar.jpg" alt="Avatar" class="comment-avatar">
            <input type="text" placeholder="Thêm nhận xét trong lớp học...">
            <button class="comment-send"><i class="fas fa-paper-plane"></i></button>
          </div>
        </div>
        <div class="notice-card">
          <div class="notice-header">
            <img src="/images/avatar.jpg" alt="Avatar" class="notice-avatar">
            <div class="notice-info">
              <div class="notice-author">Admin</div>
              <div class="notice-time">28 thg 5</div>
            </div>
            <button class="notice-menu"><i class="fas fa-ellipsis-v"></i></button>
          </div>
          <div class="notice-body">
            <div style="white-space:normal;word-break:break-word;overflow-wrap:break-word;">
              Nhớ nộp bài tập chương 1 trước 10/06.<br>
              Nếu có thắc mắc liên hệ trợ giảng.
            </div>
          </div>
          <div class="notice-comment">
            <img src="/images/avatar.jpg" alt="Avatar" class="comment-avatar">
            <input type="text" placeholder="Thêm nhận xét trong lớp học...">
            <button class="comment-send"><i class="fas fa-paper-plane"></i></button>
          </div>
        </div>
      </section>
      <!-- Popup Thêm thông báo -->
      @if (userRole == null || userRole.ToLower() != "sinhvien")
      {
      <div class="modal" id="addNoticeModal" style="display:none; position:fixed; z-index:1001; left:0; top:0; width:100vw; height:100vh; background:rgba(44,62,80,0.18); justify-content:center; align-items:center;">
        <div class="modal-content add-notice-modal-content">
          <div class="modal-header" style="display:flex; align-items:center; justify-content:space-between; border-bottom:1px solid #e0e6ed; padding-bottom:18px; margin-bottom:24px;">
            <h2 style="font-size:1.35rem; font-weight:700; color:#22334d; margin:0;">Thêm thông báo</h2>
            <button onclick="closeAddNoticeModal()" style="background:none; border:none; font-size:1.3rem; color:#888; cursor:pointer;"><i class="fas fa-times"></i></button>
          </div>
          <form id="addNoticeForm" onsubmit="submitAddNotice(event)">
            <div class="form-group">
              <label for="noticeTitle">Tiêu đề</label>
              <input type="text" id="noticeTitle" required>
            </div>
            <div class="form-group">
              <label for="noticeContent">Nội dung</label>
              <textarea id="noticeContent" rows="5" required style="resize:vertical;"></textarea>
            </div>
            <div class="modal-actions">
              <button type="button" onclick="closeAddNoticeModal()" class="btn-cancel">Hủy</button>
              <button type="submit" class="btn-primary">Thêm</button>
            </div>
          </form>
        </div>
      </div>
      }
      <!-- Popup Sửa thông báo -->
      @if (userRole == null || userRole.ToLower() != "sinhvien")
      {
      <div class="modal" id="editNoticeModal" style="display:none; position:fixed; z-index:1001; left:0; top:0; width:100vw; height:100vh; background:rgba(44,62,80,0.18); justify-content:center; align-items:center;">
        <div class="modal-content add-notice-modal-content">
          <div class="modal-header" style="display:flex; align-items:center; justify-content:space-between; border-bottom:1px solid #e0e6ed; padding-bottom:18px; margin-bottom:24px;">
            <h2 style="font-size:1.35rem; font-weight:700; color:#22334d; margin:0;">Sửa thông báo</h2>
            <button onclick="closeEditNoticeModal()" style="background:none; border:none; font-size:1.3rem; color:#888; cursor:pointer;"><i class="fas fa-times"></i></button>
          </div>
          <form id="editNoticeForm" onsubmit="submitEditNotice(event)">
            <div class="form-group">
              <label for="editNoticeTitle">Tiêu đề</label>
              <input type="text" id="editNoticeTitle" required>
            </div>
            <div class="form-group">
              <label for="editNoticeContent">Nội dung</label>
              <textarea id="editNoticeContent" rows="5" required style="resize:vertical;"></textarea>
            </div>
            <div class="modal-actions">
              <button type="button" onclick="closeEditNoticeModal()" class="btn-cancel">Hủy</button>
              <button type="submit" class="btn-primary">Lưu</button>
            </div>
          </form>
        </div>
      </div>
      }
      <!-- Modal xác nhận xóa thông báo -->
      @if (userRole == null || userRole.ToLower() != "sinhvien")
      {
      <div class="modal" id="confirmDeleteNoticeModal" style="display:none; position:fixed; z-index:1002; left:0; top:0; width:100vw; height:100vh; background:rgba(44,62,80,0.18); justify-content:center; align-items:center;">
        <div class="modal-content" style="min-width:350px; max-width:400px; background:#fff; border-radius:14px; box-shadow:0 8px 32px rgba(52,152,219,0.18),0 1.5px 8px rgba(0,0,0,0.08); padding:32px 28px 24px 28px; position:relative; display:flex; flex-direction:column; align-items:center;">
          <h2 style="font-size:1.2rem; font-weight:600; color:#22334d; margin-bottom:18px; text-align:center;">Xác nhận xóa thông báo?</h2>
          <div style="display:flex; justify-content:center; gap:16px; margin-top:18px;">
            <button type="button" onclick="closeConfirmDeleteNoticeModal()" class="btn-cancel">Hủy</button>
            <button type="button" onclick="confirmDeleteNotice()" class="btn-primary" style="background:#e74c3c; border:none;">Xóa</button>
          </div>
        </div>
      </div>
      }
    </div>
  </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script src="https://cdn.ckeditor.com/4.22.1/standard/ckeditor.js"></script>

<script>
  let selectedStudentsForInvite = []; // Thay đổi từ single student thành array
  let currentLopHocPhanId = @(ViewBag.IdLopHocPhan ?? 1);

  console.log('DEBUG: currentLopHocPhanId =', currentLopHocPhanId);

  // Dữ liệu lessons đơn giản để test
  const lessons = [
    [{
      id: 1,
      title: 'Bài học từ database',
      meta: 'Dữ liệu từ chương và bài trong CSDL',
      video: '',
      materials: [{
        icon: 'fa-file-pdf',
        name: 'Tài liệu bài học',
        link: '#',
        size: '1.2 MB'
      }],
      desc: 'Hiển thị nội dung bài học từ cơ sở dữ liệu. Sidebar sẽ hiển thị dữ liệu thực từ ViewBag.Chuongs.'
    }]
  ];

  console.log('DEBUG: lessons data =', lessons);

  // Hiển thị bài đầu tiên mặc định
  window.onload = function() {
    // Update currentLopHocPhanId from ViewBag
    currentLopHocPhanId = @(ViewBag.IdLopHocPhan ?? 1);
    console.log('DEBUG: currentLopHocPhanId updated to =', currentLopHocPhanId);

    // Chỉ hiển thị bài đầu tiên nếu có dữ liệu
    if (lessons.length > 0 && lessons[0].length > 0) {
      showLesson(0, 0);
    } else {
      // Hiển thị thông báo khi không có bài học
      document.getElementById('tab-lessons').innerHTML = `
        <div style="padding: 40px; text-align: center; color: #666;">
          <i class="fas fa-book-open" style="font-size: 48px; margin-bottom: 16px; display: block; color: #ddd;"></i>
          <h3 style="margin-bottom: 8px; color: #666;">Chưa có bài giảng</h3>
          <p style="margin: 0;">Lớp học này chưa có chương và bài giảng nào được tạo.</p>
        </div>
      `;
    }

    // Auto-refresh students list every 30 seconds if on students tab
    setInterval(() => {
      const studentsTab = document.getElementById('tab-students');
      if (studentsTab && studentsTab.style.display !== 'none') {
        refreshStudentsList();
      }
    }, 30000);

    connectNotificationHub();
  };

  // Function để refresh danh sách sinh viên
  function refreshStudentsList() {
    console.log('Refreshing students list for class:', currentLopHocPhanId);

    fetch(`/User/ChiTietHocPhan/GetStudentsList?idLopHocPhan=${currentLopHocPhanId}`)
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          updateStudentsTable(data.data);
        } else {
          console.error('Failed to refresh students list:', data.message);
        }
      })
      .catch(error => {
        console.error('Error refreshing students list:', error);
      });
  }

  // Function để update students table với data mới
  function updateStudentsTable(students) {
    const tableBody = document.getElementById('studentsTableBody');
    const userRole = '@userRole';

    if (!students || students.length === 0) {
      tableBody.innerHTML = `
        <tr>
          <td colspan="${userRole !== "Sinhvien" ? "8" : "7"}" style="text-align: center; padding: 20px; color: #666;">
            <i class="fas fa-users" style="font-size: 24px; margin-bottom: 8px; display: block;"></i>
            Chưa có sinh viên nào trong lớp học này
            ${userRole !== "Sinhvien" ? `
              <div style="margin-top: 12px;">
                <button onclick="openInviteStudentModal()" style="background: #007bff; color: white; border: none; padding: 8px 16px; border-radius: 6px; cursor: pointer;">
                  <i class="fas fa-plus"></i> Mời sinh viên tham gia
                </button>
              </div>
            ` : ''}
          </td>
        </tr>`;
      return;
    }

    tableBody.innerHTML = students.map(student => `
      <tr>
        <td>${student.tenDangNhap || 'N/A'}</td>
        <td>${student.hoTen || 'N/A'}</td>
        <td>${student.vaiTro === "Sinhvien" ? "Sinh viên" : student.vaiTro}</td>
        <td>${student.email || 'N/A'}</td>
        <td>${student.soDienThoai || 'Chưa cập nhật'}</td>
        <td>
          <img style="width:52px; height:52px; border-radius:50%;" 
               src="${student.anhDaiDien || '/images/avatar.jpg'}" 
               class="student-avatar" />
        </td>
        <td><span class="status-badge ${student.trangThai === 'HoatDong' ? 'hoatdong' : ''}">${student.trangThai === 'HoatDong' ? 'Hoạt động' : (student.trangThai || 'Chưa cập nhật')}</span></td>
        ${userRole !== "Sinhvien" ? `
          <td>
            <button class="btn-icon" onclick="openEditStudentModal(this)"><i class="fas fa-edit"></i></button>
            <button class="btn-icon" onclick="openConfirmDeleteStudentModal(this)"><i class="fas fa-trash"></i></button>
          </td>
        ` : ''}
      </tr>
    `).join('');

    console.log(`Updated students table with ${students.length} students`);
  }

  function showLesson(chapterIdx, lessonIdx) {
    // Kiểm tra dữ liệu hợp lệ
    if (!lessons || lessons.length === 0 ||
      !lessons[chapterIdx] || lessons[chapterIdx].length === 0 ||
      !lessons[chapterIdx][lessonIdx]) {
      document.getElementById('tab-lessons').innerHTML = `
        <div style="padding: 40px; text-align: center; color: #666;">
          <i class="fas fa-exclamation-triangle" style="font-size: 48px; margin-bottom: 16px; display: block; color: #ffa500;"></i>
          <h3 style="margin-bottom: 8px; color: #666;">Không tìm thấy bài học</h3>
          <p style="margin: 0;">Bài học này không tồn tại hoặc đã bị xóa.</p>
        </div>
      `;
      return;
    }

    // Cập nhật trạng thái active cho các button
    document.querySelectorAll('.lesson-btn').forEach(btn => btn.classList.remove('active'));
    const chapters = document.querySelectorAll('.chapter');
    if (chapters[chapterIdx]) {
      const lessonBtns = chapters[chapterIdx].querySelectorAll('.lesson-btn');
      if (lessonBtns[lessonIdx]) {
        lessonBtns[lessonIdx].classList.add('active');
      }
    }

    const lesson = lessons[chapterIdx][lessonIdx];
    document.getElementById('tab-lessons').innerHTML = `
        <div class="lesson-header">
            <h1>${lesson.title}</h1>
            <div class="lesson-meta">${lesson.meta}</div>
        </div>
        <div class="lesson-body">
            ${lesson.video ? `<div class="lesson-video"><video controls><source src="${lesson.video}" type="video/mp4">Trình duyệt không hỗ trợ video.</video></div>` : ''}
            <div class="lesson-materials">
                <h4>Tài liệu bài giảng</h4>
                <ul>
                    ${lesson.materials.map(m => `<li><i class="fas ${m.icon}"></i> <a href="${m.link}">${m.name}</a> <span class="file-size">${m.size}</span></li>`).join('')}
                </ul>
            </div>
            <div class="lesson-desc">
                <h4>Mô tả</h4>
                <p>${lesson.desc}</p>
            </div>
        </div>
        <div class="comments-section">
            <h2>Bình luận</h2>
            <form class="comment-form" onsubmit="event.preventDefault();">
                <textarea placeholder="Viết bình luận của bạn..."></textarea>
                <button type="submit">Gửi</button>
            </form>
            <div class="comments-list">
                <div class="comment">
                    <img src="/images/avatar.jpg" alt="User Avatar" class="comment-avatar">
                    <div class="comment-content">
                        <div class="comment-header">
                            <h4>Nguyễn Văn A</h4>
                            <span class="comment-time">2 giờ trước</span>
                        </div>
                        <p>Bài giảng rất hay và dễ hiểu. Cảm ơn thầy!</p>
                    </div>
                </div>
            </div>
        </div>
    `;
  }

  // Mở/đóng chương
  function toggleChapter(btn) {
    const li = btn.parentElement;
    li.classList.toggle('open');
    document.querySelectorAll('.chapter-title').forEach(b => b.classList.remove('active'));
    btn.classList.add('active');
  }

  // Tab switching for course detail
  function showTab(tab, btn) {
    document.querySelectorAll('.course-tab-btn').forEach(b => b.classList.remove('active'));
    btn.classList.add('active');
    document.querySelectorAll('.course-tab-content').forEach(c => c.style.display = 'none');
    document.getElementById('tab-' + tab).style.display = 'block';
    // Ẩn/hiện menu chương & bài
    var sidebar = document.querySelector('.sidebar-chapters');
    if (tab === 'lessons') {
      sidebar.style.display = 'block';
    } else {
      sidebar.style.display = 'none';
    }
    if (tab === 'notices') {
      loadNotifications(currentLopHocPhanId);
    }
  }

  // Popup mời học viên
  function openInviteStudentModal() {
    document.getElementById('inviteStudentModal').style.display = 'flex';
    document.getElementById('searchStudentEmail').value = '';
    document.getElementById('searchResults').innerHTML = '';
    selectedStudentsForInvite = []; // Reset selected students
    updateSelectedStudentsDisplay();
  }

  function closeInviteStudentModal() {
    document.getElementById('inviteStudentModal').style.display = 'none';
    selectedStudentsForInvite = []; // Reset selected students when closing
    updateSelectedStudentsDisplay();
  }

  function searchStudent(query) {
    const resultsContainer = document.getElementById('searchResults');

    if (!query.trim()) {
      resultsContainer.innerHTML = '';
      return;
    }

    // Hiển thị loading
    resultsContainer.innerHTML = '<div style="padding:12px; color:#666; text-align:center;"><i class="fas fa-spinner fa-spin"></i> Đang tìm kiếm...</div>';

    // Call API để tìm kiếm sinh viên
    fetch(`/User/ChiTietHocPhan/SearchStudents?email=${encodeURIComponent(query)}`)
      .then(response => response.json())
      .then(data => {
        if (!data.success) {
          resultsContainer.innerHTML = `<div style="padding:12px; color:#e74c3c; text-align:center;">${data.message}</div>`;
          return;
        }

        if (!data.data || data.data.length === 0) {
          resultsContainer.innerHTML = '<div style="padding:12px; color:#666; text-align:center;">Không tìm thấy sinh viên</div>';
          return;
        }

        resultsContainer.innerHTML = data.data.map(student => {
          const isSelected = selectedStudentsForInvite.some(s => s.idTaiKhoan === student.idTaiKhoan);
          return `
            <div class="search-result-item ${isSelected ? 'selected' : ''}" onclick="toggleStudentSelection(${student.idTaiKhoan}, '${student.email.replace(/'/g, "\\'")}', '${student.hoTen.replace(/'/g, "\\'")}', '${(student.anhDaiDien || '/images/avatar.jpg').replace(/'/g, "\\'")}'); event.stopPropagation();" style="padding:12px; display:flex; align-items:center; gap:12px; cursor:pointer; border-radius:6px; margin-bottom:4px; transition:all 0.2s; border: 2px solid ${isSelected ? '#2196F3' : 'transparent'}; background: ${isSelected ? '#e3f2fd' : 'transparent'};" onmouseover="if(!this.classList.contains('selected')) this.style.background='#f5f5f5'" onmouseout="if(!this.classList.contains('selected')) this.style.background='transparent'">
              <div style="width:20px; height:20px; border:2px solid ${isSelected ? '#2196F3' : '#ddd'}; border-radius:4px; display:flex; align-items:center; justify-content:center; background:${isSelected ? '#2196F3' : 'white'};">
                ${isSelected ? '<i class="fas fa-check" style="color:white; font-size:12px;"></i>' : ''}
              </div>
              <img src="${student.anhDaiDien || '/images/avatar.jpg'}" alt="${student.hoTen}" style="width:40px; height:40px; border-radius:50%; object-fit:cover;">
              <div style="flex:1;">
                <div style="font-weight:500; color:#333;">${student.hoTen}</div>
                <div style="font-size:0.9rem; color:#666;">${student.email}</div>
              </div>
            </div>
          `;
        }).join('');
      })
      .catch(error => {
        console.error('Error searching students:', error);
        resultsContainer.innerHTML = '<div style="padding:12px; color:#e74c3c; text-align:center;">Lỗi tìm kiếm</div>';
      });
  }

  function toggleStudentSelection(idTaiKhoan, email, name, avatar) {
    const existingIndex = selectedStudentsForInvite.findIndex(s => s.idTaiKhoan === idTaiKhoan);

    if (existingIndex >= 0) {
      // Remove from selection
      selectedStudentsForInvite.splice(existingIndex, 1);
      console.log('Removed student from selection:', name);
    } else {
      // Add to selection
      selectedStudentsForInvite.push({
        idTaiKhoan,
        email,
        name,
        avatar
      });
      console.log('Added student to selection:', name);
    }

    // Update display
    updateSelectedStudentsDisplay();

    // Refresh search results to update checkboxes
    const searchQuery = document.getElementById('searchStudentEmail').value;
    if (searchQuery.trim()) {
      searchStudent(searchQuery);
    }

    console.log('Selected students:', selectedStudentsForInvite);
  }

  function updateSelectedStudentsDisplay() {
    const container = document.getElementById('selectedStudentsContainer');
    const list = document.getElementById('selectedStudentsList');

    // Update count in footer
    const countElement = document.getElementById('selectedCountNumber');
    const inviteButton = document.getElementById('inviteButton');

    if (countElement) {
      countElement.textContent = selectedStudentsForInvite.length;
    }

    if (inviteButton) {
      if (selectedStudentsForInvite.length > 0) {
        inviteButton.disabled = false;
        inviteButton.style.background = '#007bff';
        inviteButton.style.cursor = 'pointer';
        inviteButton.textContent = `Mời (${selectedStudentsForInvite.length})`;
      } else {
        inviteButton.disabled = true;
        inviteButton.style.background = '#ccc';
        inviteButton.style.cursor = 'not-allowed';
        inviteButton.textContent = 'Mời';
      }
    }

    if (selectedStudentsForInvite.length === 0) {
      container.style.display = 'none';
      return;
    }

    container.style.display = 'block';
    list.innerHTML = selectedStudentsForInvite.map((student, index) => `
      <div style="display:flex; align-items:center; gap:8px; padding:6px; border-bottom:1px solid #f0f0f0; ${index === selectedStudentsForInvite.length - 1 ? 'border-bottom:none;' : ''}">
        <img src="${student.avatar || '/images/avatar.jpg'}" alt="${student.name}" style="width:30px; height:30px; border-radius:50%; object-fit:cover;">
        <div style="flex:1; font-size:0.85rem;">
          <div style="font-weight:500; color:#333;">${student.name}</div>
          <div style="color:#666;">${student.email}</div>
        </div>
        <button onclick="removeStudentFromSelection(${student.idTaiKhoan})" style="background:none; border:none; color:#e74c3c; cursor:pointer; padding:2px; border-radius:3px;" title="Bỏ chọn">
          <i class="fas fa-times" style="font-size:12px;"></i>
        </button>
      </div>
    `).join('');
  }

  function removeStudentFromSelection(idTaiKhoan) {
    selectedStudentsForInvite = selectedStudentsForInvite.filter(s => s.idTaiKhoan !== idTaiKhoan);
    updateSelectedStudentsDisplay();

    // Refresh search results if there's a query
    const searchQuery = document.getElementById('searchStudentEmail').value;
    if (searchQuery.trim()) {
      searchStudent(searchQuery);
    }
  }

  function clearSelectedStudents() {
    selectedStudentsForInvite = [];
    updateSelectedStudentsDisplay();

    // Refresh search results if there's a query
    const searchQuery = document.getElementById('searchStudentEmail').value;
    if (searchQuery.trim()) {
      searchStudent(searchQuery);
    }
  }

  function inviteSelectedStudent() {
    if (!selectedStudentsForInvite || selectedStudentsForInvite.length === 0) {
      alert('Vui lòng chọn ít nhất một sinh viên để mời');
      return;
    }

    // Hiển thị loading
    const inviteBtn = document.getElementById('inviteButton');
    const originalText = inviteBtn.textContent;
    inviteBtn.disabled = true;
    inviteBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang gửi...';
    inviteBtn.style.background = '#6c757d';

    // Debug log trước khi gửi
    console.log('Sending invite request:', {
      idLopHocPhan: currentLopHocPhanId,
      selectedStudents: selectedStudentsForInvite,
      studentCount: selectedStudentsForInvite.length
    });

    // Gửi API để mời nhiều sinh viên (sử dụng FormData cho CSRF token)
    const formData = new FormData();
    formData.append('idLopHocPhan', currentLopHocPhanId);

    // Thêm tất cả ID sinh viên được chọn
    selectedStudentsForInvite.forEach((student, index) => {
      formData.append(`idTaiKhoans[${index}]`, student.idTaiKhoan);
    });

    formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]')?.value || '');

    fetch('/User/ChiTietHocPhan/InviteStudents', { // Đổi endpoint thành InviteStudents
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Hiển thị thông báo chi tiết hơn
          let message = data.message;
          if (data.details) {
            message += `\n\nChi tiết:`;
            message += `\n- Thành công: ${data.details.successful}`;
            if (data.details.failed > 0) {
              message += `\n- Lỗi: ${data.details.failed}`;
            }
            if (data.details.alreadyMembers > 0) {
              message += `\n- Đã tham gia: ${data.details.alreadyMembers}`;
            }
          }
          alert(`✅ ${message}`);
          closeInviteStudentModal();

          // Refresh students list after successful invite
          setTimeout(() => {
            if (typeof refreshStudentsList === 'function') {
              refreshStudentsList();
            }
          }, 2000);
        } else {
          alert(`❌ ${data.message}`);
        }
      })
      .catch(error => {
        console.error('Error inviting students:', error);
        alert('❌ Lỗi khi gửi lời mời');
      })
      .finally(() => {
        inviteBtn.disabled = false;
        inviteBtn.style.background = '#007bff';
        inviteBtn.textContent = originalText;
      });
  }

  function toggleNoticeMenu(btn) {
    // Đóng tất cả menu khác
    document.querySelectorAll('.notice-menu-popup').forEach(p => p.style.display = 'none');
    // Mở menu của thông báo này
    const popup = btn.parentElement.querySelector('.notice-menu-popup');
    if (popup) {
      popup.style.display = 'flex';
      // Đóng khi click ra ngoài
      setTimeout(() => {
        document.addEventListener('mousedown', closeNoticeMenuOnClickOutside);
      }, 0);
    }
  }

  function closeNoticeMenuOnClickOutside(e) {
    if (!e.target.closest('.notice-menu-popup') && !e.target.closest('.notice-menu')) {
      document.querySelectorAll('.notice-menu-popup').forEach(p => p.style.display = 'none');
      document.removeEventListener('mousedown', closeNoticeMenuOnClickOutside);
    }
  }

  function addNotice() {
    document.getElementById('addNoticeModal').style.display = 'flex';
    document.getElementById('addNoticeModal').style.alignItems = 'center';
    document.getElementById('addNoticeModal').style.justifyContent = 'center';
    document.getElementById('addNoticeForm').reset();
    document.querySelectorAll('.notice-menu-popup').forEach(p => p.style.display = 'none');
    if (window.CKEDITOR && CKEDITOR.instances.noticeContent) {
      CKEDITOR.instances.noticeContent.destroy(true);
    }
    CKEDITOR.replace('noticeContent');
  }

  function closeAddNoticeModal() {
    document.getElementById('addNoticeModal').style.display = 'none';
  }

  function submitAddNotice(e) {
    e.preventDefault();
    const title = document.getElementById('noticeTitle').value;
    const content = CKEDITOR.instances.noticeContent.getData();
    fetch('/User/ThongBao/AddNotification', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          TieuDe: title,
          NoiDung: content,
          IdLopHocPhan: currentLopHocPhanId
        })
      })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          closeAddNoticeModal();
        } else {
          alert('❌ ' + data.message);
        }
      });
  }

  let currentEditNoticeCard = null;
  let currentDeleteNoticeCard = null;

  function editNotice(btn) {
    currentEditNoticeCard = btn.closest('.notice-card');
    // Lấy HTML nội dung cũ
    const htmlContent = currentEditNoticeCard.querySelector('.notice-body div')?.innerHTML || '';
    let title = '';
    let content = htmlContent;

    // Tạo thẻ tạm để parse HTML
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = htmlContent;

    // Lấy dòng đầu tiên (có thể là <p> hoặc text)
    let firstText = '';
    if (tempDiv.firstChild && tempDiv.firstChild.nodeType === 1 && tempDiv.firstChild.tagName === 'P') {
      firstText = tempDiv.firstChild.innerText.trim();
      title = firstText;
      // Xóa dòng tiêu đề khỏi nội dung
      tempDiv.removeChild(tempDiv.firstChild);
      content = tempDiv.innerHTML.trim();
    } else if (tempDiv.firstChild && tempDiv.firstChild.nodeType === 3) {
      // Nếu là text node
      firstText = tempDiv.firstChild.textContent.trim();
      title = firstText;
      tempDiv.removeChild(tempDiv.firstChild);
      content = tempDiv.innerHTML.trim();
    } else {
      // Nếu không có <p>, lấy toàn bộ text đầu tiên
      const match = htmlContent.match(/^(.+?)<br\s*\/?>([\\s\\S]*)/i);
      if (match) {
        title = match[1].trim();
        content = match[2].trim();
      }
    }

    document.getElementById('editNoticeTitle').value = title;
    // Destroy CKEditor instance nếu đã tồn tại
    if (window.CKEDITOR && CKEDITOR.instances.editNoticeContent) {
      CKEDITOR.instances.editNoticeContent.destroy(true);
    }
    // Khởi tạo lại CKEditor cho textarea
    CKEDITOR.replace('editNoticeContent');
    CKEDITOR.instances.editNoticeContent.on('instanceReady', function() {
      CKEDITOR.instances.editNoticeContent.setData(content);
    });
    document.getElementById('editNoticeModal').style.display = 'flex';
    document.getElementById('editNoticeModal').style.alignItems = 'center';
    document.getElementById('editNoticeModal').style.justifyContent = 'center';
    document.getElementById('editNoticeForm').reset();
    document.querySelectorAll('.notice-menu-popup').forEach(p => p.style.display = 'none');
  }

  function closeEditNoticeModal() {
    document.getElementById('editNoticeModal').style.display = 'none';
  }

  function submitEditNotice(e) {
    e.preventDefault();
    const title = document.getElementById('editNoticeTitle').value;
    const content = CKEDITOR.instances.editNoticeContent.getData();
    const id = currentEditNoticeCard?.getAttribute('data-id');
    if (!id) {
      alert('Không xác định được thông báo để sửa!');
      return;
    }
    fetch('/User/ThongBao/EditNotification', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          IdThongBao: id,
          TieuDe: title,
          NoiDung: content
        })
      })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          closeEditNoticeModal();
        } else {
          alert('❌ ' + data.message);
        }
      });
  }

  function deleteNotice(btn) {
    currentDeleteNoticeCard = btn.closest('.notice-card');
    document.getElementById('confirmDeleteNoticeModal').style.display = 'flex';
    document.getElementById('confirmDeleteNoticeModal').style.alignItems = 'center';
    document.getElementById('confirmDeleteNoticeModal').style.justifyContent = 'center';
    document.querySelectorAll('.notice-menu-popup').forEach(p => p.style.display = 'none');
  }

  function closeConfirmDeleteNoticeModal() {
    document.getElementById('confirmDeleteNoticeModal').style.display = 'none';
  }

  function confirmDeleteNotice() {
    if (currentDeleteNoticeCard) {
      currentDeleteNoticeCard.remove();
      currentDeleteNoticeCard = null;
    }
    closeConfirmDeleteNoticeModal();
  }

  function openEditStudentModal(btn) {
    const row = btn.closest('tr');
    document.getElementById('editStudentUsername').value = row.children[0]?.innerText || '';
    document.getElementById('editStudentName').value = row.children[1]?.innerText || '';
    document.getElementById('editStudentRole').value = row.children[2]?.innerText || '';
    document.getElementById('editStudentEmail').value = row.children[3]?.innerText || '';
    document.getElementById('editStudentPhone').value = row.children[4]?.innerText || '';
    document.getElementById('editStudentAvatar').value = '';
    document.getElementById('editStudentStatus').value = row.querySelector('.status-badge')?.classList.contains('hoatdong') ? 'hoatdong' : 'khonghoatdong';
    document.getElementById('editStudentModal').style.display = 'flex';
    document.getElementById('editStudentModal').style.alignItems = 'center';
    document.getElementById('editStudentModal').style.justifyContent = 'center';
    document.getElementById('editStudentForm').reset();
  }

  function closeEditStudentModal() {
    document.getElementById('editStudentModal').style.display = 'none';
  }

  function submitEditStudent(e) {
    e.preventDefault();
    closeEditStudentModal();
  }

  let currentDeleteStudentRow = null;

  function openConfirmDeleteStudentModal(btn) {
    currentDeleteStudentRow = btn.closest('tr');
    document.getElementById('confirmDeleteStudentModal').style.display = 'flex';
    document.getElementById('confirmDeleteStudentModal').style.alignItems = 'center';
    document.getElementById('confirmDeleteStudentModal').style.justifyContent = 'center';
  }

  function closeConfirmDeleteStudentModal() {
    document.getElementById('confirmDeleteStudentModal').style.display = 'none';
  }

  function confirmDeleteStudent() {
    if (currentDeleteStudentRow) {
      currentDeleteStudentRow.remove();
      currentDeleteStudentRow = null;
    }
    closeConfirmDeleteStudentModal();
  }

  function loadNotifications(idLopHocPhan, page = 1) {
    fetch(`/User/ThongBao/GetNotifications?idLopHocPhan=${idLopHocPhan}&page=${page}`)
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          renderNotifications(data.data);
        } else {
          document.getElementById('tab-notices').innerHTML = `<div style="padding:20px;color:red;">${data.message}</div>`;
        }
      })
      .catch(err => {
        document.getElementById('tab-notices').innerHTML = `<div style="padding:20px;color:red;">Lỗi khi tải thông báo</div>`;
      });
  }

  function renderNotifications(notifications) {
    const userRole = '@userRole';
    const isNotStudent = !userRole || userRole.toLowerCase() !== 'sinhvien';
    const container = document.getElementById('tab-notices');
    if (!notifications || notifications.length === 0) {
      container.innerHTML = `<div style="padding:20px;text-align:center;color:#888;">Chưa có thông báo nào</div>`;
      return;
    }
    container.innerHTML = notifications.map(tb => `
      <div class="notice-card" data-id="${tb.idThongBao}">
        <div class="notice-header">
          <img src="${tb.avatar ? tb.avatar : '/images/avatar.jpg'}" class="notice-avatar" />
          <div class="notice-info">
            <div class="notice-author">${tb.tenGiangVien || ''}</div>
            <div class="notice-time">${tb.ngayTao || ''}</div>
          </div>
          <button class="notice-menu" onclick="toggleNoticeMenu(this)"><i class="fas fa-ellipsis-v"></i></button>
          ${isNotStudent ? `
          <div class="notice-menu-popup" style="display:none; position:absolute; right:24px; top:48px; background:#fff; box-shadow:0 2px 8px rgba(44,62,80,0.12); border-radius:8px; min-width:160px; z-index:10;">
            <button onclick="addNotice()" class="notice-menu-item">Thêm thông báo</button>
            <button onclick="editNotice(this)" class="notice-menu-item">Sửa thông báo</button>
            <button onclick="deleteNotice(this)" class="notice-menu-item" style="color:#e74c3c;">Xóa thông báo</button>
          </div>
          ` : ''}
        </div>
        <div class="notice-body">
          <div style="white-space:normal;word-break:break-word;overflow-wrap:break-word;">${tb.noiDung || ''}</div>
        </div>
        <div class="notice-comment">
          <img src="${tb.avatar ? tb.avatar : '/images/avatar.jpg'}" alt="Avatar" class="comment-avatar">
          <input type="text" placeholder="Thêm nhận xét trong lớp học...">
          <button class="comment-send"><i class="fas fa-paper-plane"></i></button>
        </div>
      </div>
    `).join('');
  }

  let notificationConnection = null;

  function connectNotificationHub() {
    notificationConnection = new signalR.HubConnectionBuilder()
      .withUrl("/notificationHub")
      .build();
    notificationConnection.on("NewNotification", function(notification) {
      loadNotifications(currentLopHocPhanId);
    });
    notificationConnection.on("UpdateNotification", function(notification) {
      loadNotifications(currentLopHocPhanId);
    });
    notificationConnection.start().then(function() {
      notificationConnection.invoke("JoinClass", currentLopHocPhanId.toString());
    });
  }

  // Khởi tạo CKEditor khi DOM loaded
  window.addEventListener('DOMContentLoaded', function() {
    if (document.getElementById('noticeContent')) {
      CKEDITOR.replace('noticeContent');
    }
    if (document.getElementById('editNoticeContent')) {
      CKEDITOR.replace('editNoticeContent');
    }
  });
</script>

@* Handle TempData messages *@
@if (TempData["Success"] != null)
{
<script>
  window.addEventListener('DOMContentLoaded', function() {
    alert('✅ @TempData["Success"]');
    setTimeout(() => {
      if (typeof refreshStudentsList === 'function') {
        refreshStudentsList();
      }
    }, 1000);
  });
</script>
}

@if (TempData["Error"] != null)
{
<script>
  window.addEventListener('DOMContentLoaded', function() {
    alert('❌ @TempData["Error"]');
  });
</script>
}

@if (TempData["Warning"] != null)
{
<script>
  window.addEventListener('DOMContentLoaded', function() {
    alert('⚠️ @TempData["Warning"]');
  });
</script>
}

@if (TempData["Info"] != null)
{
<script>
  window.addEventListener('DOMContentLoaded', function() {
    alert('ℹ️ @TempData["Info"]');
  });
</script>
}