@{
ViewData["Title"] = "Chi tiết học phần";
var userRole = ViewBag.UserRole as string;
var currentUser = ViewBag.CurrentUser as Lecture_web.Models.TaiKhoanModels;
var currentUserAvatar = currentUser?.AnhDaiDien ?? "/images/avatar.jpg";
var currentUserName = currentUser?.HoTen ?? "Người dùng";
<link rel="stylesheet" href="~/css/chitiethocphan.css" />
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
}

@* CSRF Token for AJAX calls *@
@Html.AntiForgeryToken()

<div class="app-container">
  <div class="header-row" style="display: flex; align-items: center; gap: 16px; margin: 24px 24px 0 32px;">
    <a style="text-decoration: none; color: #22334d;" href="/User/LopHoc/Index" class="back-btn">
      <i class="fas fa-arrow-left"></i> Quay lại
    </a>
    <div class="course-tabs">
      <button class="course-tab-btn active" onclick="showTab('lessons', this)"><i class="fas fa-book"></i> Bài giảng</button>
      <button class="course-tab-btn" onclick="showTab('students', this)"><i class="fas fa-users"></i> Danh sách sinh viên</button>
      <button class="course-tab-btn" onclick="showTab('notices', this)"><i class="fas fa-bell"></i> Thông báo</button>
    </div>
  </div>
  <div class="main-box" style="background: #fff; border-radius: 18px; box-shadow: 0 4px 24px rgba(52,152,219,0.10), 0 1.5px 8px rgba(0,0,0,0.08); border: 1.5px solid #bfc9d1; overflow: visible; margin: 16px 24px 0 24px; display: flex; flex-direction: row; min-height: 650px;">
    <!-- Sidebar chương & bài -->
    <aside class="sidebar-chapters">
      <h2>Chương & Bài</h2>
      <ul class="chapter-list" id="chaptersList">
        <!-- Sẽ được render bởi JavaScript từ ViewBag.Chuongs -->
        <li style="padding: 20px; text-align: center; color: #666;">
          <i class="fas fa-spinner fa-spin" style="font-size: 24px; margin-bottom: 8px; display: block;"></i>
          Đang tải chương và bài...
        </li>
      </ul>
    </aside>
    <div style="flex:1;display:flex;flex-direction:column;min-height: 600px;">
      <!-- Tab Contents -->
      <section class="main-lesson-content course-tab-content" id="tab-lessons" style="display:block;">
        <!-- Nội dung bài sẽ được render ở đây -->
      </section>
      <section class="main-lesson-content course-tab-content" id="tab-students" style="display:none;">
        <div class="management-header">
          <div class="search-filter">

            <div class="search-box">
              <i class="fas fa-search"></i>
              <input type="text" id="studentSearchInput" placeholder="Tìm kiếm sinh viên theo tên, email, tên đăng nhập..." oninput="searchStudentsInList(this.value)" onkeyup="searchStudentsInList(this.value)">
            </div>
            @if (userRole != "Sinhvien")
            {
            <button onclick="openInviteStudentModal()" class="invite-student-btn" title="Mời sinh viên">
              <i class="fas fa-plus"></i>
              <span>Mời sinh viên</span>
            </button>
            }
          </div>
          <div style="display:flex; align-items:center; gap:12px;">
            <div id="studentsInfo" style="font-size: 0.9rem; color: #666;">
              <!-- Thông tin số lượng sinh viên sẽ được cập nhật bởi JavaScript -->
            </div>
          </div>
        </div>
        <div class="student-table">
          <table>
            <thead>
              <tr>
                <th>Tên đăng nhập</th>
                <th>Họ và tên</th>
                <th>Vai trò</th>
                <th>Email</th>
                <th>Số điện thoại</th>
                <th>Ảnh đại diện</th>
                <th>Trạng thái</th>
                @if (userRole != "Sinhvien")
                {
                <th>Thao tác</th>
                }
              </tr>
            </thead>
            <tbody id="studentsTableBody">
              @{
              var studentsInClass = ViewBag.StudentsInClass as IEnumerable<dynamic>;
                }

                <!-- DEBUG: Kiểm tra data sinh viên -->
                @if (ViewBag.StudentsInClass != null)
                {
                <script>
                  console.log('StudentsInClass data:', @Html.Raw(Json.Serialize(ViewBag.StudentsInClass)));
                </script>
                }

                @if (studentsInClass != null && studentsInClass.Any())
                {
                @foreach (var student in studentsInClass)
                {
                <tr>
                  <td>@student.TenDangNhap</td>
                  <td>@student.HoTen</td>
                  <td>@(student.VaiTro == "Sinhvien" ? "Sinh viên" : student.VaiTro)</td>
                  <td>@student.Email</td>
                  <td>@(student.SoDienThoai ?? "Chưa cập nhật")</td>
                  <td>
                    @if (!string.IsNullOrEmpty(student.AnhDaiDien))
                    {
                    <img style="width:52px; height:52px; border-radius:50%;" src="@(!string.IsNullOrEmpty(student.AnhDaiDien) ? student.AnhDaiDien : " /images/avatar.jpg")" class="student-avatar" />
                    }
                    else
                    {
                    <img style="width:52px; height:52px; border-radius:50%;" src="/images/avatar.jpg" class="student-avatar" />
                    }
                  </td>
                  <td><span class="status-badge @(student.TrangThai == " HoatDong" ? "hoatdong" : "" )">@(student.TrangThai == "HoatDong" ? "Hoạt động" : (student.TrangThai ?? "Chưa cập nhật"))</span></td>
                  @if (userRole != "Sinhvien")
                  {
                  <td>
                    <button class="btn-icon" onclick="openEditStudentModal(this)"><i class="fas fa-edit"></i></button>
                    <button class="btn-icon" onclick="openConfirmDeleteStudentModal(this)"><i class="fas fa-trash"></i></button>
                  </td>
                  }
                </tr>
                }
                }
                else
                {
                <tr>
                  <td colspan="@(userRole != " Sinhvien" ? "8" : "7" )" style="text-align: center; padding: 20px; color: #666;">
                    <i class="fas fa-users" style="font-size: 24px; margin-bottom: 8px; display: block;"></i>
                    Chưa có sinh viên nào trong lớp học này
                    @if (userRole != "Sinhvien")
                    {
                    <div style="margin-top: 12px;">
                      <button onclick="openInviteStudentModal()" style="background: #007bff; color: white; border: none; padding: 8px 16px; border-radius: 6px; cursor: pointer;">
                        <i class="fas fa-plus"></i> Mời sinh viên tham gia
                      </button>
                    </div>
                    }
                  </td>
                </tr>
                }
            </tbody>
          </table>
        </div>
        <!-- Phân trang -->
        <div id="studentsPagination">
          <partial name="_PaginationPartial" />
        </div>

        <!-- Popup Mời học viên -->
        @if (userRole != "Sinhvien")
        {
        <div class="modal" id="inviteStudentModal" style="display:none; position:fixed; z-index:1000; left:0; top:0; width:100vw; height:100vh; background:rgba(44,62,80,0.18); justify-content:center; align-items:center;">
          <div class="modal-content" style="background:#fff; border-radius:14px; box-shadow:0 8px 32px rgba(52,152,219,0.18),0 1.5px 8px rgba(0,0,0,0.08); padding:0; width:420px; max-width:90vw; position:relative; overflow:hidden;">
            <div class="modal-header" style="background:#fff; padding:20px 24px 16px 24px; border-bottom:1px solid #e5e5e5;">
              <h2 style="font-size:1.2rem; font-weight:600; color:#333; margin:0;">Mời học viên</h2>
              <button onclick="closeInviteStudentModal()" style="position:absolute; top:16px; right:20px; background:none; border:none; font-size:1.3rem; color:#666; cursor:pointer;"><i class="fas fa-times"></i></button>
            </div>
            <div class="modal-body" style="padding:20px 24px;">
              <div style="margin-bottom:16px;">
                <div style="display:flex; gap:8px; margin-bottom:8px;">
                  <select id="searchType" style="padding:12px; border:1px solid #ddd; border-radius:8px; background:white; min-width:140px;" onchange="updateSearchPlaceholder()">
                    <option value="all">Tất cả</option>
                    <option value="email">Email</option>
                    <option value="name">Họ tên</option>
                    <option value="username">Tên đăng nhập</option>
                    <option value="phone">Số điện thoại</option>
                  </select>
                  <input type="text" id="searchStudentEmail" placeholder="Tìm kiếm sinh viên..." style="flex:1; padding:12px 16px; border:1px solid #ddd; border-radius:8px; font-size:1rem; outline:none;" oninput="searchStudentWithType(this.value)" onkeyup="searchStudentWithType(this.value)">
                </div>
                <div style="font-size:0.85rem; color:#666; margin-top:4px;">
                  Nhập từ khóa để tìm kiếm sinh viên theo tiêu chí đã chọn
                </div>
              </div>

              <!-- Hiển thị sinh viên đã chọn -->
              <div id="selectedStudentsContainer" style="margin-bottom:16px; display:none;">
                <h4 style="font-size:0.9rem; color:#333; margin-bottom:8px;">Sinh viên đã chọn:</h4>
                <div id="selectedStudentsList" style="max-height:100px; overflow-y:auto; border:1px solid #e0e0e0; border-radius:6px; padding:8px;">
                  <!-- Selected students will be displayed here -->
                </div>
                <div style="margin-top:8px; text-align:right;">
                  <button type="button" onclick="clearSelectedStudents()" style="background:none; border:1px solid #ddd; color:#666; padding:4px 8px; border-radius:4px; font-size:0.8rem; cursor:pointer;">Xóa tất cả chọn</button>
                </div>
              </div>

              <div id="searchResults" style="max-height:200px; overflow-y:auto;">
                <!-- Kết quả tìm kiếm sẽ hiển thị ở đây -->
              </div>
              <div style="color:#666; font-size:0.9rem; margin-top:12px; text-align:center;">
                Tìm kiếm và chọn nhiều sinh viên để mời cùng lúc
              </div>
            </div>
            <div class="modal-footer" style="padding:16px 24px; background:#f8f9fa; display:flex; justify-content:space-between; align-items:center;">
              <div id="selectedCount" style="font-size:0.9rem; color:#666;">
                Đã chọn: <span id="selectedCountNumber">0</span> sinh viên
              </div>
              <div style="display:flex; gap:12px;">
                <button type="button" onclick="closeInviteStudentModal()" style="padding:8px 20px; border:1px solid #ddd; background:#fff; color:#666; border-radius:6px; font-size:0.95rem; cursor:pointer;">Hủy</button>
                <button type="button" onclick="inviteSelectedStudent()" id="inviteButton" style="padding:8px 20px; background:#007bff; color:#fff; border:none; border-radius:6px; font-size:0.95rem; cursor:pointer;" disabled>Mời</button>
              </div>
            </div>
          </div>
        </div>
        }

        <!-- Popup chỉnh sửa sinh viên -->
        @if (userRole != "Sinhvien")
        {
        <div class="modal" id="editStudentModal" style="display:none; position:fixed; z-index:1001; left:0; top:0; width:100vw; height:100vh; background:rgba(44,62,80,0.18); justify-content:center; align-items:center;">
          <div class="modal-content add-student-modal-content">
            <div class="modal-header" style="display:flex; align-items:center; justify-content:space-between; border-bottom:1px solid #e0e6ed; padding-bottom:18px; margin-bottom:24px;">
              <h2 style="font-size:1.35rem; font-weight:700; color:#22334d; margin:0;">Chỉnh sửa sinh viên</h2>
              <button onclick="closeEditStudentModal()" style="background:none; border:none; font-size:1.3rem; color:#888; cursor:pointer;"><i class="fas fa-times"></i></button>
            </div>
            <form id="editStudentForm" onsubmit="submitEditStudent(event)">
              <div class="form-group">
                <label for="editStudentUsername">Tên đăng nhập</label>
                <input type="text" id="editStudentUsername" required>
              </div>
              <div class="form-group">
                <label for="editStudentName">Họ và tên</label>
                <input type="text" id="editStudentName" required>
              </div>
              <div class="form-group">
                <label for="editStudentRole">Vai trò</label>
                <select id="editStudentRole" required>
                  <option value="student">Sinh viên</option>
                  <option value="teacher">Giảng viên</option>
                </select>
              </div>
              <div class="form-group">
                <label for="editStudentEmail">Email</label>
                <input type="email" id="editStudentEmail" required>
              </div>
              <div class="form-group">
                <label for="editStudentPhone">Số điện thoại</label>
                <input type="text" id="editStudentPhone">
              </div>
              <div class="form-group">
                <label for="editStudentAvatar">Ảnh đại diện</label>
                <input type="file" id="editStudentAvatar" accept="image/*">
              </div>
              <div class="form-group">
                <label for="editStudentStatus">Trạng thái</label>
                <select id="editStudentStatus" required>
                  <option value="hoatdong">Hoạt động</option>
                  <option value="khonghoatdong">Không hoạt động</option>
                </select>
              </div>
              <div class="form-actions modal-actions">
                <button type="button" onclick="closeEditStudentModal()" class="btn-cancel">Hủy</button>
                <button type="submit" class="btn-primary">Lưu thay đổi</button>
              </div>
            </form>
          </div>
        </div>
        }
        <!-- Modal xác nhận xóa sinh viên -->
        @if (userRole != "Sinhvien")
        {
        <div class="modal" id="confirmDeleteStudentModal" style="display:none; position:fixed; z-index:1002; left:0; top:0; width:100vw; height:100vh; background:rgba(44,62,80,0.18); justify-content:center; align-items:center;">
          <div class="modal-content" style="min-width:350px; max-width:400px; background:#fff; border-radius:14px; box-shadow:0 8px 32px rgba(52,152,219,0.18),0 1.5px 8px rgba(0,0,0,0.08); padding:32px 28px 24px 28px; position:relative; display:flex; flex-direction:column; align-items:center;">
            <h2 style="font-size:1.2rem; font-weight:600; color:#22334d; margin-bottom:18px; text-align:center;">Xác nhận xóa sinh viên?</h2>
            <div style="display:flex; justify-content:center; gap:16px; margin-top:18px;">
              <button type="button" onclick="closeConfirmDeleteStudentModal()" class="btn-cancel">Hủy</button>
              <button type="button" onclick="confirmDeleteStudent()" class="btn-primary" style="background:#e74c3c; border:none;">Xóa</button>
            </div>
          </div>
        </div>
        }
      </section>
      <section class="main-lesson-content course-tab-content" id="tab-notices" style="display:none;">
        <!-- Nội dung thông báo sẽ được load từ API -->
        <div style="padding: 40px; text-align: center; color: #666;">
          <i class="fas fa-spinner fa-spin" style="font-size: 24px; margin-bottom: 8px; display: block;"></i>
          Đang tải thông báo...
        </div>
      </section>
      @if (userRole == null || userRole.ToLower() != "sinhvien")
      {
      <div class="modal" id="addNoticeModal" style="display:none; position:fixed; z-index:1001; left:0; top:0; width:100vw; height:100vh; background:rgba(44,62,80,0.18); justify-content:center; align-items:center;">
        <div class="modal-content add-notice-modal-content">
          <div class="modal-header" style="display:flex; align-items:center; justify-content:space-between; border-bottom:1px solid #e0e6ed; padding-bottom:18px; margin-bottom:24px;">
            <h2 style="font-size:1.35rem; font-weight:700; color:#22334d; margin:0;">Thêm thông báo</h2>
            <button onclick="closeAddNoticeModal()" style="background:none; border:none; font-size:1.3rem; color:#888; cursor:pointer;"><i class="fas fa-times"></i></button>
          </div>
          <form id="addNoticeForm" onsubmit="submitAddNotice(event)">
            <div class="form-group">
              <label for="noticeTitle">Tiêu đề</label>
              <input type="text" id="noticeTitle" required>
            </div>
            <div class="form-group">
              <label for="noticeContent">Nội dung</label>
              <textarea id="noticeContent" rows="5" required style="resize:vertical;"></textarea>
            </div>
            <div class="modal-actions">
              <button type="button" onclick="closeAddNoticeModal()" class="btn-cancel">Hủy</button>
              <button type="submit" class="btn-primary">Thêm</button>
            </div>
          </form>
        </div>
      </div>
      }
      @if (userRole == null || userRole.ToLower() != "sinhvien")
      {
      <div class="modal" id="editNoticeModal" style="display:none; position:fixed; z-index:1001; left:0; top:0; width:100vw; height:100vh; background:rgba(44,62,80,0.18); justify-content:center; align-items:center;">
        <div class="modal-content add-notice-modal-content">
          <div class="modal-header" style="display:flex; align-items:center; justify-content:space-between; border-bottom:1px solid #e0e6ed; padding-bottom:18px; margin-bottom:24px;">
            <h2 style="font-size:1.35rem; font-weight:700; color:#22334d; margin:0;">Sửa thông báo</h2>
            <button onclick="closeEditNoticeModal()" style="background:none; border:none; font-size:1.3rem; color:#888; cursor:pointer;"><i class="fas fa-times"></i></button>
          </div>
          <form id="editNoticeForm" onsubmit="submitEditNotice(event)">
            <div class="form-group">
              <label for="editNoticeTitle">Tiêu đề</label>
              <input type="text" id="editNoticeTitle" required>
            </div>
            <div class="form-group">
              <label for="editNoticeContent">Nội dung</label>
              <textarea id="editNoticeContent" rows="5" required style="resize:vertical;"></textarea>
            </div>
            <div class="modal-actions">
              <button type="button" onclick="closeEditNoticeModal()" class="btn-cancel">Hủy</button>
              <button type="submit" class="btn-primary">Lưu</button>
            </div>
          </form>
        </div>
      </div>
      }
      @if (userRole == null || userRole.ToLower() != "sinhvien")
      {
      <div class="modal" id="confirmDeleteNoticeModal" style="display:none; position:fixed; z-index:1002; left:0; top:0; width:100vw; height:100vh; background:rgba(44,62,80,0.18); justify-content:center; align-items:center;">
        <div class="modal-content" style="min-width:350px; max-width:400px; background:#fff; border-radius:14px; box-shadow:0 8px 32px rgba(52,152,219,0.18),0 1.5px 8px rgba(0,0,0,0.08); padding:32px 28px 24px 28px; position:relative; display:flex; flex-direction:column; align-items:center;">
          <h2 style="font-size:1.2rem; font-weight:600; color:#22334d; margin-bottom:18px; text-align:center;">Xác nhận xóa thông báo?</h2>
          <div style="display:flex; justify-content:center; gap:16px; margin-top:18px;">
            <button type="button" onclick="closeConfirmDeleteNoticeModal()" class="btn-cancel">Hủy</button>
            <button type="button" onclick="confirmDeleteNotice()" class="btn-primary" style="background:#e74c3c; border:none;">Xóa</button>
          </div>
        </div>
      </div>
      }
    </div>
  </div>
</div>

<style>
  .comments-section {
    background: #fff;
    border-radius: 12px;
    border: 1px solid #e1e5e9;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
    margin-top: 24px;
    padding: 0;
    overflow: hidden;
  }

  .comments-section h2 {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    margin: 0;
    padding: 16px 20px;
    font-size: 1.1rem;
    font-weight: 600;
    border-radius: 12px 12px 0 0;
  }

  .comment-form {
    padding: 20px;
    background: #f8f9fa;
    border: 1px solid #e9ecef;
    border-radius: 8px 8px 0 0;
    width: 100%;
    box-sizing: border-box;
  }

  .comments-list {
    max-height: none;
    overflow: visible;
    padding: 20px;
    background: #fff;
    display: block !important;
    visibility: visible !important;
    min-height: 150px;
    border-radius: 0 0 8px 8px;
    border: 1px solid #e9ecef;
    border-top: none;
    position: relative;
    z-index: 1;
    width: 100%;
    box-sizing: border-box;
  }

  /* Ensure no hidden overflow on main containers */
  .lesson-content,
  .course-tab-content,
  #tab-lessons,
  .lesson-body {
    overflow: visible !important;
    min-height: auto !important;
  }



  /* Custom scrollbar cho comments list */
  .comments-list::-webkit-scrollbar {
    width: 8px;
  }

  .comments-list::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 4px;
  }

  .comments-list::-webkit-scrollbar-thumb {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 4px;
  }

  .comments-list::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%);
  }

  .comment {
    /* Inline styles are now applied in JavaScript for better flexibility */
  }

  .comment:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    border-color: #007bff;
    transform: translateY(-1px);
  }

  .comment:last-child {
    margin-bottom: 0;
  }

  .comment-avatar {
    width: 36px;
    height: 36px;
    border-radius: 50%;
    object-fit: cover;
    border: 2px solid #e9ecef;
    float: left;
    margin-right: 12px;
  }

  .comment-avatar-empty {
    width: 36px;
    height: 36px;
    border-radius: 50%;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    float: left;
    margin-right: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: 600;
    font-size: 14px;
  }

  .comment-main {
    margin-left: 48px;
  }

  .comment-header {
    display: flex;
    align-items: center;
    margin-bottom: 8px;
    flex-wrap: wrap;
    gap: 8px;
  }

  .comment-author {
    font-weight: 600;
    color: #2c3e50;
    font-size: 0.95rem;
  }

  .comment-role {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 2px 8px;
    border-radius: 12px;
    font-size: 0.8rem;
    font-weight: 500;
  }

  .comment-time {
    color: #6c757d;
    font-size: 0.85rem;
  }

  .comment-actions {
    margin-left: auto;
    display: flex;
    gap: 8px;
  }

  .comment-actions a {
    color: #6c757d;
    text-decoration: none;
    padding: 4px 8px;
    border-radius: 4px;
    transition: all 0.2s ease;
    font-size: 0.9rem;
  }

  .comment-actions a:hover {
    background: #f8f9fa;
    color: #007bff;
  }

  .comment-actions a.delete:hover {
    color: #e74c3c;
    background: #ffebee;
  }

  .comment-body {
    color: #495057;
    line-height: 1.5;
    word-wrap: break-word;
    font-size: 0.95rem;
  }

  .comment .replies {
    margin-left: 0;
    margin-top: 12px;
    padding-left: 16px;
    border-left: 2px solid #e9ecef;
  }

  .comment-form textarea {
    width: 100%;
    min-height: 90px;
    border-radius: 8px;
    border: 1px solid #dee2e6;
    padding: 16px;
    margin-bottom: 16px;
    font-family: inherit;
    font-size: 0.95rem;
    resize: vertical;
    transition: border-color 0.2s ease;
    box-sizing: border-box;
  }

  .comment-form textarea:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.1);
  }

  .comment-form button {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: #fff;
    border: none;
    border-radius: 6px;
    padding: 10px 20px;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.2s ease;
  }

  .comment-form button:hover {
    background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%);
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
  }

  .show-more-btn {
    display: block;
    margin: 16px auto;
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    padding: 8px 16px;
    color: #007bff;
    cursor: pointer;
    transition: all 0.2s ease;
    font-weight: 500;
  }

  .show-more-btn:hover {
    background: #007bff;
    color: white;
    border-color: #007bff;
  }

  .show-more-btn:not(:hover) {
    transition: all 0.2s ease;
  }

  .show-more-btn.primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-color: transparent;
  }

  .show-more-btn.primary:hover {
    background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%);
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
  }

  /* Responsive cho mobile */
  @@media (max-width: 768px) {
    .comments-list {
      max-height: none !important;
      padding: 16px;
      overflow: visible !important;
    }

    .comment {
      padding: 12px;
      margin-bottom: 12px;
      flex-direction: row !important;
      gap: 8px;
      overflow: visible !important;
    }

    .comment-header {
      flex-wrap: wrap;
      align-items: flex-start;
      gap: 4px;
    }

    .comment-actions {
      margin-left: auto;
      margin-top: 0;
    }

    .comment-form {
      padding: 16px;
    }

    .comment-form textarea {
      min-height: 70px;
      padding: 12px;
    }

    .comments-section {
      margin-top: 20px !important;
      padding: 16px !important;
      overflow: visible !important;
    }

    .comment-role {
      font-size: 0.7rem;
      padding: 1px 6px;
    }
  }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script src="https://cdn.ckeditor.com/4.22.1/standard/ckeditor.js"></script>

<script>
  let selectedStudentsForInvite = []; // Thay đổi từ single student thành array
  let currentLopHocPhanId = @(ViewBag.IdLopHocPhan ?? 1);
  let currentStudentPage = @(ViewBag.CurrentPage ?? 1);
  let totalStudentPages = @(ViewBag.TotalPages ?? 1);
  let totalStudents = @(ViewBag.TotalStudents ?? 0);
  let hasUnloadedNotifications = false; // Theo dõi có thông báo mới chưa được load

  // Dữ liệu lessons từ ViewBag.Chuongs
  const chuongsData = @Html.Raw(Json.Serialize(ViewBag.Chuongs ?? new List < object > ()));

  // Function để render sidebar từ dữ liệu
  function renderChaptersList() {
    const chaptersList = document.getElementById('chaptersList');

    if (!chuongsData || chuongsData.length === 0) {
      chaptersList.innerHTML = `
        <li style="padding: 20px; text-align: center; color: #666;">
          <i class="fas fa-book" style="font-size: 24px; margin-bottom: 8px; display: block;"></i>
          Chưa có chương nào được tạo
        </li>
      `;
      return;
    }

    let html = '';
    chuongsData.forEach((chuong, chapterIdx) => {
      const tenChuong = chuong.tenChuong || chuong.TenChuong || `Chương ${chapterIdx + 1}`;
      const baisList = chuong.bais || chuong.Bais || [];

      html += `
        <li class="chapter ${chapterIdx === 0 ? 'open' : ''}">
          <button class="chapter-title ${chapterIdx === 0 ? 'active' : ''}" onclick="toggleChapter(this)">
            ${tenChuong}
            <i class="fas fa-chevron-down" style="margin-left:auto"></i>
          </button>
          <ul class="lesson-list">
      `;

      if (baisList && baisList.length > 0) {
        baisList.forEach((bai, lessonIdx) => {
          const tieuDeBai = bai.tieuDeBai || bai.TieuDeBai || `Bài ${lessonIdx + 1}`;
          const lessonNumber = lessonIdx + 1;
          html += `
            <li>
              <button class="lesson-btn ${chapterIdx === 0 && lessonIdx === 0 ? 'active' : ''}" onclick="showLesson(${chapterIdx}, ${lessonIdx})">
                <span class="lesson-number">${lessonNumber}</span>
                <span class="lesson-title">${tieuDeBai}</span>
              </button>
            </li>
          `;
        });
      } else {
        html += `
          <li style="padding: 10px; text-align: center; color: #888; font-style: italic;">
            Chưa có bài học nào
          </li>
        `;
      }

      html += '</ul></li>';
    });

    chaptersList.innerHTML = html;
  }

  // Hiển thị bài đầu tiên mặc định
  window.onload = function() {
    // Update currentLopHocPhanId from ViewBag
    currentLopHocPhanId = @(ViewBag.IdLopHocPhan ?? 1);

    // Render sidebar trước
    renderChaptersList();

    // Chỉ hiển thị bài đầu tiên nếu có dữ liệu
    const firstChapterBais = chuongsData && chuongsData.length > 0 ? (chuongsData[0].bais || chuongsData[0].Bais) : null;
    if (chuongsData && chuongsData.length > 0 && firstChapterBais && firstChapterBais.length > 0) {
      showLesson(0, 0);
    } else {
      // Hiển thị thông báo khi không có bài học
      document.getElementById('tab-lessons').innerHTML = `
        <div style="padding: 40px; text-align: center; color: #666;">
          <i class="fas fa-book-open" style="font-size: 48px; margin-bottom: 16px; display: block; color: #ddd;"></i>
          <h3 style="margin-bottom: 8px; color: #666;">Chưa có bài giảng</h3>
          <p style="margin: 0;">Lớp học này chưa có chương và bài giảng nào được tạo.</p>
        </div>
      `;
    }

    // Khởi tạo pagination HTML
    updatePaginationHtml();

    // Khởi tạo thông tin sinh viên
    updateStudentsInfo();

    // Auto-refresh students list every 30 seconds if on students tab
    setInterval(() => {
      const studentsTab = document.getElementById('tab-students');
      if (studentsTab && studentsTab.style.display !== 'none') {
        refreshStudentsList();
      }
    }, 30000);

    // Clear notifications content ban đầu
    clearNotificationsContent();

    // Khởi tạo SignalR connection để nhận thông báo real-time
    connectNotificationHub();
  };

  // Function để refresh danh sách sinh viên
  function refreshStudentsList(page = currentStudentPage) {
    console.log('Refreshing students list for class:', currentLopHocPhanId, 'page:', page);

    fetch(`/User/ChiTietHocPhan/GetStudentsList?idLopHocPhan=${currentLopHocPhanId}&page=${page}`)
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          updateStudentsTable(data.data);
          updatePagination(data.pagination);
        } else {
          console.error('Failed to refresh students list:', data.message);
        }
      })
      .catch(error => {
        console.error('Error refreshing students list:', error);
      });
  }

  // Function để xử lý chuyển trang sinh viên
  function changeStudentPage(page) {
    console.log('Changing to page:', page);

    if (page < 1 || page > totalStudentPages) {
      console.log('Invalid page number:', page);
      return;
    }

    currentStudentPage = page;
    refreshStudentsList(page);
  }

  // Function để cập nhật thông tin phân trang
  function updatePagination(paginationData) {
    if (paginationData) {
      currentStudentPage = paginationData.currentPage;
      totalStudentPages = paginationData.totalPages;
      totalStudents = paginationData.totalStudents;

      console.log('Updated pagination info:', paginationData);

      // Cập nhật pagination HTML
      updatePaginationHtml();

      // Cập nhật thông tin sinh viên
      updateStudentsInfo();
    }
  }

  // Function để cập nhật thông tin số lượng sinh viên
  function updateStudentsInfo() {
    const infoElement = document.getElementById('studentsInfo');
    if (infoElement && totalStudents > 0) {
      const startIndex = (currentStudentPage - 1) * @(ViewBag.PageSize ?? 1) + 1;
      const endIndex = Math.min(currentStudentPage * @(ViewBag.PageSize ?? 1), totalStudents);
      infoElement.innerHTML = `Hiển thị ${startIndex}-${endIndex} trong tổng số ${totalStudents} sinh viên`;
    } else if (infoElement) {
      infoElement.innerHTML = '';
    }
  }

  // Function để cập nhật HTML phân trang
  function updatePaginationHtml() {
    const paginationContainer = document.getElementById('studentsPagination');

    // Ẩn pagination nếu không có sinh viên hoặc có lỗi
    if (totalStudentPages <= 0) {
      paginationContainer.style.display = 'none';
      return;
    }

    paginationContainer.style.display = 'block';

    let paginationHtml = '<div class="pagination">';

    // Previous button
    if (currentStudentPage > 1) {
      paginationHtml += `<button class="btn-page" onclick="changeStudentPage(${currentStudentPage - 1})"><i class="fas fa-chevron-left"></i></button>`;
    } else {
      paginationHtml += `<button class="btn-page" disabled><i class="fas fa-chevron-left"></i></button>`;
    }

    // Page numbers
    for (let i = 1; i <= totalStudentPages; i++) {
      const activeClass = i === currentStudentPage ? ' active' : '';
      paginationHtml += `<button class="btn-page${activeClass}" onclick="changeStudentPage(${i})">${i}</button>`;
    }

    // Next button
    if (currentStudentPage < totalStudentPages) {
      paginationHtml += `<button class="btn-page" onclick="changeStudentPage(${currentStudentPage + 1})"><i class="fas fa-chevron-right"></i></button>`;
    } else {
      paginationHtml += `<button class="btn-page" disabled><i class="fas fa-chevron-right"></i></button>`;
    }

    paginationHtml += '</div>';

    paginationContainer.innerHTML = paginationHtml;
  }

  // Function để update students table với data mới
  function updateStudentsTable(students) {
    const tableBody = document.getElementById('studentsTableBody');
    const userRole = '@userRole';

    if (!students || students.length === 0) {
      let emptyMessage = 'Chưa có sinh viên nào trong lớp học này';
      if (totalStudents > 0) {
        emptyMessage = `Không có sinh viên nào trong trang ${currentStudentPage}`;
      }

      tableBody.innerHTML = `
        <tr>
          <td colspan="${userRole !== "Sinhvien" ? "8" : "7"}" style="text-align: center; padding: 20px; color: #666;">
            <i class="fas fa-users" style="font-size: 24px; margin-bottom: 8px; display: block;"></i>
            ${emptyMessage}
            ${userRole !== "Sinhvien" && totalStudents === 0 ? `
              <div style="margin-top: 12px;">
                <button onclick="openInviteStudentModal()" style="background: #007bff; color: white; border: none; padding: 8px 16px; border-radius: 6px; cursor: pointer;">
                  <i class="fas fa-plus"></i> Mời sinh viên tham gia
                </button>
              </div>
            ` : ''}
          </td>
        </tr>`;

      // Clear search result info when no students
      const resultInfo = document.getElementById('searchResultInfo');
      if (resultInfo) {
        resultInfo.style.display = 'none';
      }
      return;
    }

    tableBody.innerHTML = students.map(student => `
      <tr>
        <td>${student.tenDangNhap || 'N/A'}</td>
        <td>${student.hoTen || 'N/A'}</td>
        <td>${student.vaiTro === "Sinhvien" ? "Sinh viên" : student.vaiTro}</td>
        <td>${student.email || 'N/A'}</td>
        <td>${student.soDienThoai || 'Chưa cập nhật'}</td>
        <td>
          ${student.anhDaiDien ? `<img style='width:52px; height:52px; border-radius:50%;' src='${student.anhDaiDien}' class='student-avatar' />` : ''}
        </td>
        <td><span class="status-badge ${student.trangThai === 'HoatDong' ? 'hoatdong' : ''}">${student.trangThai === 'HoatDong' ? 'Hoạt động' : (student.trangThai || 'Chưa cập nhật')}</span></td>
        ${userRole !== "Sinhvien" ? `
          <td>
            <button class="btn-icon" onclick="openEditStudentModal(this)"><i class="fas fa-edit"></i></button>
            <button class="btn-icon" onclick="openConfirmDeleteStudentModal(this)"><i class="fas fa-trash"></i></button>
          </td>
        ` : ''}
      </tr>
    `).join('');

    console.log(`Updated students table with ${students.length} students`);

    // Reapply current search filter after updating table
    const searchInput = document.getElementById('studentSearchInput');
    if (searchInput && searchInput.value.trim()) {
      const currentSearchTerm = searchInput.value.trim();
      console.log('Reapplying search filter:', currentSearchTerm);
      setTimeout(() => {
        searchStudentsInList(currentSearchTerm);
      }, 100);
    }
  }

  function showLesson(chapterIdx, lessonIdx) {

    // Kiểm tra xem tab lessons có đang active không
    const lessonsTab = document.getElementById('tab-lessons');
    if (!lessonsTab) {
      console.error('tab-lessons element not found');
      return;
    }

    // Kiểm tra dữ liệu hợp lệ từ chuongsData - hỗ trợ cả PascalCase và camelCase
    let chuong = chuongsData && chuongsData[chapterIdx] ? chuongsData[chapterIdx] : null;
    let baisList = chuong ? (chuong.bais || chuong.Bais) : null;
    let bai = baisList && baisList[lessonIdx] ? baisList[lessonIdx] : null;

    if (!chuong || !baisList || baisList.length === 0 || !bai) {
      lessonsTab.innerHTML = `
        <div style="padding: 40px; text-align: center; color: #666;">
          <i class="fas fa-exclamation-triangle" style="font-size: 48px; margin-bottom: 16px; display: block; color: #ffa500;"></i>
          <h3 style="margin-bottom: 8px; color: #666;">Không tìm thấy bài học</h3>
          <p style="margin: 0;">Bài học này không tồn tại hoặc đã bị xóa.</p>
        </div>
      `;
      return;
    }

    // Cập nhật trạng thái active cho các button
    document.querySelectorAll('.lesson-btn').forEach(btn => btn.classList.remove('active'));
    const chapters = document.querySelectorAll('.chapter');
    if (chapters[chapterIdx]) {
      const lessonBtns = chapters[chapterIdx].querySelectorAll('.lesson-btn');
      if (lessonBtns[lessonIdx]) {
        lessonBtns[lessonIdx].classList.add('active');
      }
    }

    // Lấy properties hỗ trợ cả PascalCase và camelCase
    const tenChuong = chuong.tenChuong || chuong.TenChuong || 'Chương';
    const tieuDeBai = bai.tieuDeBai || bai.TieuDeBai || 'Tiêu đề bài học';
    const noiDungText = bai.noiDungText || bai.NoiDungText || '';
    const ngayTao = (bai.ngayTao || bai.NgayTao) ? new Date(bai.ngayTao || bai.NgayTao).toLocaleDateString('vi-VN') : 'Chưa cập nhật';

    // Lưu lại id bài hiện tại để dùng khi gửi bình luận
    currentBaiId = bai && (bai.idBai || bai.IdBai) ? (bai.idBai || bai.IdBai) : null;

    lessonsTab.innerHTML = `
        <div class="lesson-header">
            <h1>${tieuDeBai}</h1>
            <div class="lesson-meta">Chương: ${tenChuong}</div>
        </div>
        <div class="lesson-body">
            <div class="lesson-desc">
                <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; border-left: 4px solid #007bff;">
                    ${noiDungText ? noiDungText.replace(/\n/g, '<br>') : 'Chưa có nội dung cho bài học này.'}
                </div>
            </div>
        </div>
        <div class="comments-section" style="margin-top: 32px; margin-bottom: 50px; padding: 0; background: #fff; border-radius: 8px; border: 1px solid #e9ecef; box-shadow: 0 2px 4px rgba(0,0,0,0.04); position: relative; z-index: 1; overflow: visible; min-height: 400px; width: 100%; box-sizing: border-box;">
            <h2 style="margin: 20px 20px 0 20px; padding-bottom: 16px; color: #333; font-weight: 600; display: flex; align-items: center; gap: 8px; border-bottom: 1px solid #f0f0f0;">
                <i class="fas fa-comments" style="color: #007bff; font-size: 1.2rem;"></i>
                Bình luận 
                <span id="commentCount" style="font-size: 0.8em; color: #666; font-weight: 400;">(0)</span>
            </h2>


            
            <form class="comment-form" onsubmit="event.preventDefault(); addComment();">
                <textarea id="commentText" placeholder="Viết bình luận của bạn..." required></textarea>
                <div style="display: flex; gap: 8px; justify-content: flex-end; width: 100%;">
                    <button type="submit" style="background: linear-gradient(135deg, #007bff 0%, #0056b3 100%); color: white; border: none; padding: 12px 24px; border-radius: 6px; font-weight: 500; cursor: pointer; transition: all 0.2s;" onmouseover="this.style.transform='translateY(-1px)'; this.style.boxShadow='0 4px 8px rgba(0,0,0,0.15)'" onmouseout="this.style.transform='none'; this.style.boxShadow='none'">Gửi</button>
                </div>
            </form>
            
                          <div class="comments-list" id="commentsList" style="margin-top: 0; min-height: 200px; width: 100%;">
                  <!-- Comments will be loaded dynamically -->
              </div>
        </div>
    `;

    // Load bình luận sau khi render xong UI - thêm timeout để đảm bảo DOM ready
    if (currentBaiId) {
      setTimeout(() => {
        const commentsList = document.getElementById('commentsList');
        if (commentsList) {
          loadCommentsForLesson(currentBaiId);
        }
      }, 100);
    }
  }

  // Mở/đóng chương
  function toggleChapter(btn) {
    const li = btn.parentElement;
    li.classList.toggle('open');
    document.querySelectorAll('.chapter-title').forEach(b => b.classList.remove('active'));
    btn.classList.add('active');
  }

  // Tab switching for course detail
  window.showTab = function(tab, btn) {
    // Remove active class from all tab buttons
    document.querySelectorAll('.course-tab-btn').forEach(b => b.classList.remove('active'));
    if (btn) btn.classList.add('active');

    // Hide all tab contents first
    document.querySelectorAll('.course-tab-content').forEach(c => {
      c.style.display = 'none';
    });

    // Show the selected tab
    const targetTab = document.getElementById('tab-' + tab);
    if (targetTab) {
      targetTab.style.display = 'block';
      if (tab === 'classcomments') {
        loadCommentsForClass();
      }
    }

    // Handle sidebar visibility
    var sidebar = document.querySelector('.sidebar-chapters');
    if (sidebar) {
      if (tab === 'lessons') {
        sidebar.style.display = 'block';
      } else {
        sidebar.style.display = 'none';
      }
    }

    // Load specific content for each tab
    switch (tab) {
      case 'lessons':
        clearNotificationsContent();
        break;
      case 'students':
        clearNotificationsContent();
        break;
      case 'notices':
        setTimeout(() => {
          loadNotifications(currentLopHocPhanId);
        }, 50);
        break;
      case 'classcomments':
        // No need to load comments here, as they are loaded separately
        break;
      default:
        clearNotificationsContent();
        break;
    }
  }

  // Function wrapper để tìm kiếm với loại được chọn
  function searchStudentWithType(query) {
    const searchTypeElement = document.getElementById('searchType');

    if (!searchTypeElement) {
      console.error('searchType element not found!');
      return;
    }

    const searchType = searchTypeElement.value;
    searchStudent(query, searchType);
  }

  // Popup mời học viên
  function openInviteStudentModal() {
    const modal = document.getElementById('inviteStudentModal');
    if (!modal) {
      console.error('inviteStudentModal not found!');
      return;
    }

    modal.style.display = 'flex';
    modal.style.visibility = 'visible';
    modal.style.opacity = '1';

    const searchInput = document.getElementById('searchStudentEmail');
    const searchResults = document.getElementById('searchResults');

    if (!searchInput) {
      console.error('searchStudentEmail input not found!');
      return;
    }

    if (!searchResults) {
      console.error('searchResults container not found!');
      return;
    }

    searchInput.value = '';
    searchResults.innerHTML = '';
    selectedStudentsForInvite = []; // Reset selected students
    updateSelectedStudentsDisplay();
  }

  function closeInviteStudentModal() {
    const modal = document.getElementById('inviteStudentModal');
    modal.style.display = 'none';
    modal.style.visibility = 'hidden';
    modal.style.opacity = '0';
    selectedStudentsForInvite = []; // Reset selected students when closing
    updateSelectedStudentsDisplay();
  }

  // Advanced search function with multiple search types
  function searchStudent(query, searchType = 'all') {
    const resultsContainer = document.getElementById('searchResults');

    if (!resultsContainer) {
      console.error('searchResults container not found!');
      return;
    }

    if (!query.trim()) {
      resultsContainer.innerHTML = '';
      return;
    }

    // Hiển thị loading
    resultsContainer.innerHTML = '<div style="padding:12px; color:#666; text-align:center;"><i class="fas fa-spinner fa-spin"></i> Đang tìm kiếm...</div>';

    // Call API để tìm kiếm sinh viên với nhiều tiêu chí
    const url = `/User/ChiTietHocPhan/SearchStudents?searchTerm=${encodeURIComponent(query)}&searchType=${searchType}`;

    fetch(url)
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        return response.json();
      })
      .then(data => {
        if (!data.success) {
          resultsContainer.innerHTML = `<div style="padding:12px; color:#e74c3c; text-align:center;">${data.message}</div>`;
          return;
        }

        if (!data.data || data.data.length === 0) {
          resultsContainer.innerHTML = '<div style="padding:12px; color:#666; text-align:center;">Không tìm thấy sinh viên</div>';
          return;
        }

        resultsContainer.innerHTML = data.data.map(student => {
          const isSelected = selectedStudentsForInvite.some(s => s.idTaiKhoan === student.idTaiKhoan);
          return `
            <div class="search-result-item ${isSelected ? 'selected' : ''}" onclick="toggleStudentSelection(${student.idTaiKhoan}, '${student.email.replace(/'/g, "\\'")}', '${student.hoTen.replace(/'/g, "\\'")}', '${(student.anhDaiDien || '/images/avatar.jpg').replace(/'/g, "\\'")}'); event.stopPropagation();" style="padding:12px; display:flex; align-items:center; gap:12px; cursor:pointer; border-radius:6px; margin-bottom:4px; transition:all 0.2s; border: 2px solid ${isSelected ? '#2196F3' : 'transparent'}; background: ${isSelected ? '#e3f2fd' : 'transparent'};" onmouseover="if(!this.classList.contains('selected')) this.style.background='#f5f5f5'" onmouseout="if(!this.classList.contains('selected')) this.style.background='transparent'">
              <div style="width:20px; height:20px; border:2px solid ${isSelected ? '#2196F3' : '#ddd'}; border-radius:4px; display:flex; align-items:center; justify-content:center; background:${isSelected ? '#2196F3' : 'white'};">
                ${isSelected ? '<i class="fas fa-check" style="color:white; font-size:12px;"></i>' : ''}
              </div>
              <img src="${student.anhDaiDien || '/images/avatar.jpg'}" alt="${student.hoTen}" style="width:40px; height:40px; border-radius:50%; object-fit:cover;">
              <div style="flex:1;">
                <div style="font-weight:500; color:#333;">${student.hoTen}</div>
                <div style="font-size:0.85rem; color:#666;">${student.email}</div>
                <div style="font-size:0.8rem; color:#999;">${student.tenDangNhap} | ${student.soDienThoai || 'Chưa có SĐT'}</div>
              </div>
              <div style="font-size:0.8rem; color:${student.trangThai === 'HoatDong' ? '#27ae60' : '#e74c3c'};">
                ${student.trangThai === 'HoatDong' ? 'Hoạt động' : 'Tạm khóa'}
              </div>
            </div>
          `;
        }).join('');
      })
      .catch(error => {
        console.error('Error searching students:', error);
        resultsContainer.innerHTML = `<div style="padding:12px; color:#e74c3c; text-align:center;">Lỗi tìm kiếm: ${error.message}</div>`;
      });
  }

  // Function để cập nhật placeholder dựa trên loại tìm kiếm được chọn
  function updateSearchPlaceholder() {
    const searchType = document.getElementById('searchType').value;
    const searchInput = document.getElementById('searchStudentEmail');

    const placeholders = {
      'all': 'Tìm kiếm sinh viên...',
      'email': 'Nhập email sinh viên...',
      'name': 'Nhập họ tên sinh viên...',
      'username': 'Nhập tên đăng nhập...',
      'phone': 'Nhập số điện thoại...'
    };

    searchInput.placeholder = placeholders[searchType] || placeholders['all'];

    // Nếu có query hiện tại, tìm kiếm lại với loại mới
    const currentQuery = searchInput.value.trim();
    if (currentQuery) {
      searchStudentWithType(currentQuery);
    }
  }

  function toggleStudentSelection(idTaiKhoan, email, name, avatar) {
    const existingIndex = selectedStudentsForInvite.findIndex(s => s.idTaiKhoan === idTaiKhoan);

    if (existingIndex >= 0) {
      // Remove from selection
      selectedStudentsForInvite.splice(existingIndex, 1);
      console.log('Removed student from selection:', name);
    } else {
      // Add to selection
      selectedStudentsForInvite.push({
        idTaiKhoan,
        email,
        name,
        avatar
      });
      console.log('Added student to selection:', name);
    }

    // Update display
    updateSelectedStudentsDisplay();

    // Refresh search results to update checkboxes
    const searchQuery = document.getElementById('searchStudentEmail').value;
    if (searchQuery.trim()) {
      searchStudentWithType(searchQuery);
    }

    console.log('Selected students:', selectedStudentsForInvite);
  }

  function updateSelectedStudentsDisplay() {
    const container = document.getElementById('selectedStudentsContainer');
    const list = document.getElementById('selectedStudentsList');

    // Update count in footer
    const countElement = document.getElementById('selectedCountNumber');
    const inviteButton = document.getElementById('inviteButton');

    if (countElement) {
      countElement.textContent = selectedStudentsForInvite.length;
    }

    if (inviteButton) {
      if (selectedStudentsForInvite.length > 0) {
        inviteButton.disabled = false;
        inviteButton.style.background = '#007bff';
        inviteButton.style.cursor = 'pointer';
        inviteButton.textContent = `Mời (${selectedStudentsForInvite.length})`;
      } else {
        inviteButton.disabled = true;
        inviteButton.style.background = '#ccc';
        inviteButton.style.cursor = 'not-allowed';
        inviteButton.textContent = 'Mời';
      }
    }

    if (selectedStudentsForInvite.length === 0) {
      container.style.display = 'none';
      return;
    }

    container.style.display = 'block';
    list.innerHTML = selectedStudentsForInvite.map((student, index) => `
      <div style="display:flex; align-items:center; gap:8px; padding:6px; border-bottom:1px solid #f0f0f0; ${index === selectedStudentsForInvite.length - 1 ? 'border-bottom:none;' : ''}">
        <img src="${student.avatar || '/images/avatar.jpg'}" alt="${student.name}" style="width:30px; height:30px; border-radius:50%; object-fit:cover;">
        <div style="flex:1; font-size:0.85rem;">
          <div style="font-weight:500; color:#333;">${student.name}</div>
          <div style="color:#666;">${student.email}</div>
        </div>
        <button onclick="removeStudentFromSelection(${student.idTaiKhoan})" style="background:none; border:none; color:#e74c3c; cursor:pointer; padding:2px; border-radius:3px;" title="Bỏ chọn">
          <i class="fas fa-times" style="font-size:12px;"></i>
        </button>
      </div>
    `).join('');
  }


  function removeStudentFromSelection(idTaiKhoan) {
    selectedStudentsForInvite = selectedStudentsForInvite.filter(s => s.idTaiKhoan !== idTaiKhoan);
    updateSelectedStudentsDisplay();

    // Refresh search results if there's a query
    const searchQuery = document.getElementById('searchStudentEmail').value;
    if (searchQuery.trim()) {
      searchStudentWithType(searchQuery);
    }
  }

  function clearSelectedStudents() {
    selectedStudentsForInvite = [];
    updateSelectedStudentsDisplay();

    // Refresh search results if there's a query
    const searchQuery = document.getElementById('searchStudentEmail').value;
    if (searchQuery.trim()) {
      searchStudentWithType(searchQuery);
    }
  }

  function inviteSelectedStudent() {
    if (!selectedStudentsForInvite || selectedStudentsForInvite.length === 0) {
      alert('Vui lòng chọn ít nhất một sinh viên để mời');
      return;
    }

    // Hiển thị loading
    const inviteBtn = document.getElementById('inviteButton');
    const originalText = inviteBtn.textContent;
    inviteBtn.disabled = true;
    inviteBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang gửi...';
    inviteBtn.style.background = '#6c757d';

    // Debug log trước khi gửi
    console.log('Sending invite request:', {
      idLopHocPhan: currentLopHocPhanId,
      selectedStudents: selectedStudentsForInvite,
      studentCount: selectedStudentsForInvite.length
    });

    // Gửi API để mời nhiều sinh viên (sử dụng FormData cho CSRF token)
    const formData = new FormData();
    formData.append('idLopHocPhan', currentLopHocPhanId);

    // Thêm tất cả ID sinh viên được chọn
    selectedStudentsForInvite.forEach((student, index) => {
      formData.append(`idTaiKhoans[${index}]`, student.idTaiKhoan);
    });

    formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]')?.value || '');

    fetch('/User/ChiTietHocPhan/InviteStudents', { // Đổi endpoint thành InviteStudents
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Hiển thị thông báo chi tiết hơn
          let message = data.message;
          if (data.details) {
            message += `\n\nChi tiết:`;
            message += `\n- Thành công: ${data.details.successful}`;
            if (data.details.failed > 0) {
              message += `\n- Lỗi: ${data.details.failed}`;
            }
            if (data.details.alreadyMembers > 0) {
              message += `\n- Đã tham gia: ${data.details.alreadyMembers}`;
            }
          }
          alert(`✅ ${message}`);
          closeInviteStudentModal();

          // Refresh students list after successful invite
          setTimeout(() => {
            if (typeof refreshStudentsList === 'function') {
              refreshStudentsList();
            }
          }, 2000);
        } else {
          alert(`❌ ${data.message}`);
        }
      })
      .catch(error => {
        console.error('Error inviting students:', error);
        alert('❌ Lỗi khi gửi lời mời');
      })
      .finally(() => {
        inviteBtn.disabled = false;
        inviteBtn.style.background = '#007bff';
        inviteBtn.textContent = originalText;
      });
  }

  function toggleNoticeMenu(btn) {
    // Đóng tất cả menu khác
    document.querySelectorAll('.notice-menu-popup').forEach(p => p.style.display = 'none');
    // Mở menu của thông báo này
    const popup = btn.parentElement.querySelector('.notice-menu-popup');
    if (popup) {
      popup.style.display = 'flex';
      // Đóng khi click ra ngoài
      setTimeout(() => {
        document.addEventListener('mousedown', closeNoticeMenuOnClickOutside);
      }, 0);
    }
  }

  function closeNoticeMenuOnClickOutside(e) {
    if (!e.target.closest('.notice-menu-popup') && !e.target.closest('.notice-menu')) {
      document.querySelectorAll('.notice-menu-popup').forEach(p => p.style.display = 'none');
      document.removeEventListener('mousedown', closeNoticeMenuOnClickOutside);
    }
  }

  function addNotice() {
    document.getElementById('addNoticeModal').style.display = 'flex';
    document.getElementById('addNoticeModal').style.alignItems = 'center';
    document.getElementById('addNoticeModal').style.justifyContent = 'center';
    document.getElementById('addNoticeForm').reset();
    document.querySelectorAll('.notice-menu-popup').forEach(p => p.style.display = 'none');
    if (window.CKEDITOR && CKEDITOR.instances.noticeContent) {
      CKEDITOR.instances.noticeContent.destroy(true);
    }
    CKEDITOR.replace('noticeContent');
  }

  function closeAddNoticeModal() {
    document.getElementById('addNoticeModal').style.display = 'none';
  }

  function submitAddNotice(e) {
    e.preventDefault();
    const title = document.getElementById('noticeTitle').value;
    const content = CKEDITOR.instances.noticeContent.getData();
    fetch('/User/ThongBao/AddNotification', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          TieuDe: title,
          NoiDung: content,
          IdLopHocPhan: currentLopHocPhanId
        })
      })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          closeAddNoticeModal();
        } else {
          alert('❌ ' + data.message);
        }
      });
  }

  let currentEditNoticeCard = null;
  let currentDeleteNoticeCard = null;

  function editNotice(btn) {
    currentEditNoticeCard = btn.closest('.notice-card');
    // Lấy HTML nội dung cũ
    const htmlContent = currentEditNoticeCard.querySelector('.notice-body div')?.innerHTML || '';
    let title = '';
    let content = htmlContent;

    // Tạo thẻ tạm để parse HTML
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = htmlContent;

    // Lấy dòng đầu tiên (có thể là <p> hoặc text)
    let firstText = '';
    if (tempDiv.firstChild && tempDiv.firstChild.nodeType === 1 && tempDiv.firstChild.tagName === 'P') {
      firstText = tempDiv.firstChild.innerText.trim();
      title = firstText;
      // Xóa dòng tiêu đề khỏi nội dung
      tempDiv.removeChild(tempDiv.firstChild);
      content = tempDiv.innerHTML.trim();
    } else if (tempDiv.firstChild && tempDiv.firstChild.nodeType === 3) {
      // Nếu là text node
      firstText = tempDiv.firstChild.textContent.trim();
      title = firstText;
      tempDiv.removeChild(tempDiv.firstChild);
      content = tempDiv.innerHTML.trim();
    } else {
      // Nếu không có <p>, lấy toàn bộ text đầu tiên
      const match = htmlContent.match(/^(.+?)<br\s*\/?>([\\s\\S]*)/i);
      if (match) {
        title = match[1].trim();
        content = match[2].trim();
      }
    }

    document.getElementById('editNoticeTitle').value = title;
    // Destroy CKEditor instance nếu đã tồn tại
    if (window.CKEDITOR && CKEDITOR.instances.editNoticeContent) {
      CKEDITOR.instances.editNoticeContent.destroy(true);
    }
    // Khởi tạo lại CKEditor cho textarea
    CKEDITOR.replace('editNoticeContent');
    CKEDITOR.instances.editNoticeContent.on('instanceReady', function() {
      CKEDITOR.instances.editNoticeContent.setData(content);
    });
    document.getElementById('editNoticeModal').style.display = 'flex';
    document.getElementById('editNoticeModal').style.alignItems = 'center';
    document.getElementById('editNoticeModal').style.justifyContent = 'center';
    document.getElementById('editNoticeForm').reset();
    document.querySelectorAll('.notice-menu-popup').forEach(p => p.style.display = 'none');
  }

  function closeEditNoticeModal() {
    document.getElementById('editNoticeModal').style.display = 'none';
  }

  function submitEditNotice(e) {
    e.preventDefault();
    const title = document.getElementById('editNoticeTitle').value;
    const content = CKEDITOR.instances.editNoticeContent.getData();
    const id = currentEditNoticeCard?.getAttribute('data-id');
    if (!id) {
      alert('Không xác định được thông báo để sửa!');
      return;
    }
    fetch('/User/ThongBao/EditNotification', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          IdThongBao: id,
          TieuDe: title,
          NoiDung: content
        })
      })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          closeEditNoticeModal();
        } else {
          alert('❌ ' + data.message);
        }
      });
  }

  function deleteNotice(btn) {
    currentDeleteNoticeCard = btn.closest('.notice-card');
    document.getElementById('confirmDeleteNoticeModal').style.display = 'flex';
    document.getElementById('confirmDeleteNoticeModal').style.alignItems = 'center';
    document.getElementById('confirmDeleteNoticeModal').style.justifyContent = 'center';
    document.querySelectorAll('.notice-menu-popup').forEach(p => p.style.display = 'none');
  }

  function closeConfirmDeleteNoticeModal() {
    document.getElementById('confirmDeleteNoticeModal').style.display = 'none';
  }

  function confirmDeleteNotice() {
    if (currentDeleteNoticeCard) {
      currentDeleteNoticeCard.remove();
      currentDeleteNoticeCard = null;
    }
    closeConfirmDeleteNoticeModal();
  }

  let currentEditStudentId = null;

  function openEditStudentModal(btn) {
    const row = btn.closest('tr');
    const cells = row.children;

    // Lấy ID sinh viên từ data attribute hoặc parse từ table
    const username = cells[0]?.innerText?.trim();
    const email = cells[3]?.innerText?.trim();

    // Tìm sinh viên bằng email để lấy ID
    if (!email) {
      alert('Không thể xác định sinh viên để chỉnh sửa');
      return;
    }

    // Hiển thị loading trong modal
    document.getElementById('editStudentModal').style.display = 'flex';
    document.getElementById('editStudentModal').style.alignItems = 'center';
    document.getElementById('editStudentModal').style.justifyContent = 'center';

    const modalContent = document.querySelector('#editStudentModal .modal-content');
    modalContent.innerHTML = '<div style="padding:40px; text-align:center;"><i class="fas fa-spinner fa-spin"></i> Đang tải thông tin sinh viên...</div>';

    // Tìm sinh viên theo email để lấy thông tin đầy đủ
    fetch(`/User/ChiTietHocPhan/SearchStudents?searchTerm=${encodeURIComponent(email)}&searchType=email`)
      .then(response => response.json())
      .then(data => {
        if (data.success && data.data && data.data.length > 0) {
          const student = data.data[0]; // Lấy sinh viên đầu tiên
          currentEditStudentId = student.idTaiKhoan;

          // Hiển thị form chỉnh sửa
          modalContent.innerHTML = `
            <div class="modal-header" style="display:flex; align-items:center; justify-content:space-between; border-bottom:1px solid #e0e6ed; padding-bottom:18px; margin-bottom:24px;">
              <h2 style="font-size:1.35rem; font-weight:700; color:#22334d; margin:0;">Chỉnh sửa sinh viên</h2>
              <button onclick="closeEditStudentModal()" style="background:none; border:none; font-size:1.3rem; color:#888; cursor:pointer;"><i class="fas fa-times"></i></button>
            </div>
            <form id="editStudentForm" onsubmit="submitEditStudent(event)">
              <div class="form-group">
                <label for="editStudentUsername">Tên đăng nhập</label>
                <input type="text" id="editStudentUsername" value="${student.tenDangNhap || ''}" readonly style="background:#f5f5f5; color:#666;">
              </div>
              <div class="form-group">
                <label for="editStudentName">Họ và tên *</label>
                <input type="text" id="editStudentName" value="${student.hoTen || ''}" required>
              </div>
              <div class="form-group">
                <label for="editStudentEmail">Email *</label>
                <input type="email" id="editStudentEmail" value="${student.email || ''}" required>
              </div>
              <div class="form-group">
                <label for="editStudentPhone">Số điện thoại</label>
                <input type="text" id="editStudentPhone" value="${student.soDienThoai || ''}">
              </div>
              <div class="form-group">
                <label>Trạng thái hiện tại</label>
                <div style="padding:8px; background:${student.trangThai === 'HoatDong' ? '#d4edda' : '#f8d7da'}; border-radius:4px; color:${student.trangThai === 'HoatDong' ? '#155724' : '#721c24'};">
                  ${student.trangThai === 'HoatDong' ? 'Hoạt động' : 'Tạm khóa'}
                </div>
              </div>
              <div class="form-actions modal-actions">
                <button type="button" onclick="closeEditStudentModal()" class="btn-cancel">Hủy</button>
                <button type="submit" class="btn-primary">Lưu thay đổi</button>
              </div>
            </form>
          `;
        } else {
          modalContent.innerHTML = `
            <div style="padding:40px; text-align:center; color:#e74c3c;">
              <i class="fas fa-exclamation-triangle" style="font-size:48px; margin-bottom:16px;"></i>
              <h3>Không tìm thấy sinh viên</h3>
              <button onclick="closeEditStudentModal()" class="btn-primary" style="margin-top:16px;">Đóng</button>
            </div>
          `;
        }
      })
      .catch(error => {
        console.error('Error loading student info:', error);
        modalContent.innerHTML = `
          <div style="padding:40px; text-align:center; color:#e74c3c;">
            <i class="fas fa-exclamation-triangle" style="font-size:48px; margin-bottom:16px;"></i>
            <h3>Lỗi tải thông tin sinh viên</h3>
            <p>${error.message}</p>
            <button onclick="closeEditStudentModal()" class="btn-primary" style="margin-top:16px;">Đóng</button>
          </div>
        `;
      });
  }

  function closeEditStudentModal() {
    document.getElementById('editStudentModal').style.display = 'none';
    currentEditStudentId = null;
  }

  function submitEditStudent(e) {
    e.preventDefault();

    if (!currentEditStudentId) {
      alert('Không xác định được sinh viên để cập nhật');
      return;
    }

    const formData = new FormData();
    formData.append('idTaiKhoan', currentEditStudentId);
    formData.append('hoTen', document.getElementById('editStudentName').value.trim());
    formData.append('email', document.getElementById('editStudentEmail').value.trim());
    formData.append('soDienThoai', document.getElementById('editStudentPhone').value.trim());
    formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]')?.value || '');

    // Hiển thị loading
    const submitBtn = e.target.querySelector('button[type="submit"]');
    const originalText = submitBtn.textContent;
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang lưu...';

    fetch('/User/ChiTietHocPhan/UpdateStudent', {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          alert('✅ ' + data.message);
          closeEditStudentModal();
          refreshStudentsList(); // Refresh danh sách sinh viên
        } else {
          alert('❌ ' + data.message);
        }
      })
      .catch(error => {
        console.error('Error updating student:', error);
        alert('❌ Lỗi cập nhật sinh viên: ' + error.message);
      })
      .finally(() => {
        submitBtn.disabled = false;
        submitBtn.textContent = originalText;
      });
  }



  let currentDeleteStudentRow = null;

  function openConfirmDeleteStudentModal(btn) {
    currentDeleteStudentRow = btn.closest('tr');
    document.getElementById('confirmDeleteStudentModal').style.display = 'flex';
    document.getElementById('confirmDeleteStudentModal').style.alignItems = 'center';
    document.getElementById('confirmDeleteStudentModal').style.justifyContent = 'center';
  }

  function closeConfirmDeleteStudentModal() {
    document.getElementById('confirmDeleteStudentModal').style.display = 'none';
  }

  function confirmDeleteStudent() {
    if (!currentDeleteStudentRow) {
      alert('Không xác định được sinh viên để xóa');
      return;
    }

    const cells = currentDeleteStudentRow.children;
    const email = cells[3]?.innerText?.trim();

    if (!email) {
      alert('Không thể xác định sinh viên để xóa');
      return;
    }

    // Tìm sinh viên theo email để lấy ID
    fetch(`/User/ChiTietHocPhan/SearchStudents?searchTerm=${encodeURIComponent(email)}&searchType=email`)
      .then(response => response.json())
      .then(data => {
        if (data.success && data.data && data.data.length > 0) {
          const student = data.data[0];
          const studentId = student.idTaiKhoan;

          // Gọi API để xóa sinh viên khỏi lớp
          const formData = new FormData();
          formData.append('idLopHocPhan', currentLopHocPhanId);
          formData.append('idTaiKhoan', studentId);
          formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]')?.value || '');

          fetch('/User/ChiTietHocPhan/RemoveStudentFromClass', {
              method: 'POST',
              body: formData
            })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                alert('✅ ' + data.message);
                closeConfirmDeleteStudentModal();
                refreshStudentsList(); // Refresh danh sách sinh viên
              } else {
                alert('❌ ' + data.message);
              }
            })
            .catch(error => {
              console.error('Error removing student:', error);
              alert('❌ Lỗi xóa sinh viên: ' + error.message);
            });
        } else {
          alert('❌ Không tìm thấy thông tin sinh viên');
        }
      })
      .catch(error => {
        console.error('Error finding student:', error);
        alert('❌ Lỗi tìm kiếm sinh viên: ' + error.message);
      });
  }

  function loadNotifications(idLopHocPhan, page = 1) {
    console.log('Loading notifications for class:', idLopHocPhan);

    // Chỉ load khi đang ở tab thông báo
    if (!isCurrentTabNotices()) {
      console.log('Not on notifications tab, skipping load');
      hasUnloadedNotifications = true;
      return;
    }

    const noticesContainer = document.getElementById('tab-notices');
    if (!noticesContainer) {
      console.error('tab-notices container not found!');
      return;
    }

    // Hiển thị loading spinner
    noticesContainer.innerHTML = `
      <div style="padding: 40px; text-align: center; color: #666;">
        <i class="fas fa-spinner fa-spin" style="font-size: 24px; margin-bottom: 8px; display: block;"></i>
        Đang tải thông báo...
      </div>
    `;

    fetch(`/User/ThongBao/GetNotifications?idLopHocPhan=${idLopHocPhan}&page=${page}`)
      .then(res => res.json())
      .then(data => {
        console.log('Notifications API response:', data);

        // Kiểm tra lại xem có còn ở tab thông báo không
        if (!isCurrentTabNotices()) {
          console.log('Tab switched during API call, not rendering');
          return;
        }

        if (data.success) {
          console.log('Notifications data:', data.data);
          if (data.data && data.data.length > 0) {
            data.data.forEach((notification, index) => {
              console.log(`Notification ${index}:`, {
                id: notification.idThongBao,
                author: notification.tenGiangVien,
                avatar: notification.avatar,
                content: notification.noiDung
              });
            });
          }
          renderNotifications(data.data);
          // Reset flag sau khi load thành công
          hasUnloadedNotifications = false;
        } else {
          noticesContainer.innerHTML = `
            <div style="padding: 40px; text-align: center; color: #e74c3c;">
              <i class="fas fa-exclamation-triangle" style="font-size: 48px; margin-bottom: 16px; display: block;"></i>
              <h3 style="margin-bottom: 8px;">Lỗi tải thông báo</h3>
              <p style="margin: 0;">${data.message || 'Không thể tải thông báo'}</p>
              <div style="margin-top: 16px;">
                <button onclick="loadNotifications(${idLopHocPhan})" style="background: #007bff; color: white; border: none; padding: 8px 16px; border-radius: 6px; cursor: pointer;">
                  <i class="fas fa-redo"></i> Thử lại
                </button>
              </div>
            </div>
          `;
        }
      })
      .catch(err => {
        console.error('Error loading notifications:', err);

        // Kiểm tra lại xem có còn ở tab thông báo không
        if (!isCurrentTabNotices()) {
          console.log('Tab switched during API call, not showing error');
          return;
        }

        noticesContainer.innerHTML = `
          <div style="padding: 40px; text-align: center; color: #e74c3c;">
            <i class="fas fa-exclamation-triangle" style="font-size: 48px; margin-bottom: 16px; display: block;"></i>
            <h3 style="margin-bottom: 8px;">Lỗi kết nối</h3>
            <p style="margin: 0;">Không thể kết nối đến server để tải thông báo</p>
            <div style="margin-top: 16px;">
              <button onclick="loadNotifications(${idLopHocPhan})" style="background: #007bff; color: white; border: none; padding: 8px 16px; border-radius: 6px; cursor: pointer;">
                <i class="fas fa-redo"></i> Thử lại
              </button>
            </div>
          </div>
        `;
      });
  }

  function renderNotifications(notifications) {
    const userRole = '@userRole';
    const isNotStudent = !userRole || userRole.toLowerCase() !== 'sinhvien';
    const currentUserAvatar = '@currentUserAvatar';
    const container = document.getElementById('tab-notices');

    if (!container) {
      console.error('tab-notices container not found!');
      return;
    }

    // Đảm bảo chỉ render khi đang ở tab thông báo
    if (!isCurrentTabNotices()) {
      console.log('Not on notifications tab, skipping render');
      return;
    }

    if (!notifications || notifications.length === 0) {
      container.innerHTML = `
        <div style="padding: 40px; text-align: center; color: #666;">
          <i class="fas fa-bell" style="font-size: 48px; margin-bottom: 16px; display: block; color: #ddd;"></i>
          <h3 style="margin-bottom: 8px; color: #666;">Thông báo</h3>
          <p style="margin: 0;">Chưa có thông báo nào.</p>
        </div>
      `;
      return;
    }

    // Header với nút thêm thông báo
    let headerHtml = '';
    if (isNotStudent) {
      headerHtml = `
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; padding: 0 20px;">
          <h3 style="margin: 0; color: #333;">Thông báo lớp học</h3>
          <button onclick="addNotice()" style="background: #007bff; color: white; border: none; padding: 8px 16px; border-radius: 6px; cursor: pointer;">
            <i class="fas fa-plus"></i> Thêm thông báo
          </button>
        </div>
      `;
    }

    const notificationsHtml = notifications.map(tb => `
      <div class="notice-card" data-id="${tb.idThongBao}">
        <div class="notice-header">
          <img src="${tb.avatar && tb.avatar.trim() !== '' ? tb.avatar : '/images/avatar.jpg'}" alt="Avatar của ${tb.tenGiangVien || 'Người tạo'}" class="notice-avatar" />
          <div class="notice-info">
            <div class="notice-author">${tb.tenGiangVien || 'Không xác định'}</div>
            <div class="notice-time">${tb.ngayTao || ''}</div>
          </div>
          ${isNotStudent ? `
          <button class="notice-menu" onclick="toggleNoticeMenu(this)" title="Tùy chọn">
            <i class="fas fa-ellipsis-v" style="display: inline-block !important;"></i>
          </button>
          <div class="notice-menu-popup" style="display:none; position:absolute; right:24px; top:48px; background:#fff; box-shadow:0 2px 8px rgba(44,62,80,0.12); border-radius:8px; min-width:160px; z-index:10;">
            <button onclick="editNotice(this)" class="notice-menu-item">Sửa thông báo</button>
            <button onclick="deleteNotice(this)" class="notice-menu-item" style="color:#e74c3c;">Xóa thông báo</button>
          </div>
          ` : ''}
        </div>
        <div class="notice-body">
          <div style="white-space:normal;word-break:break-word;overflow-wrap:break-word;">${tb.noiDung || ''}</div>
        </div>
        <div class="notice-comment">
          <img src="${currentUserAvatar}" alt="Avatar của bạn" class="comment-avatar">
          <input type="text" placeholder="Thêm nhận xét trong lớp học...">
          <button class="comment-send"><i class="fas fa-paper-plane"></i></button>
        </div>
      </div>
    `).join('');

    container.innerHTML = headerHtml + notificationsHtml;
  }

  let notificationConnection = null;

  function connectNotificationHub() {
    notificationConnection = new signalR.HubConnectionBuilder()
      .withUrl("/notificationHub")
      .build();
    notificationConnection.on("NewNotification", function(notification) {
      // Chỉ load thông báo nếu đang ở tab thông báo
      if (isCurrentTabNotices()) {
        loadNotifications(currentLopHocPhanId);
      } else {
        hasUnloadedNotifications = true;
      }
    });
    notificationConnection.on("UpdateNotification", function(notification) {
      // Chỉ load thông báo nếu đang ở tab thông báo
      if (isCurrentTabNotices()) {
        loadNotifications(currentLopHocPhanId);
      } else {
        hasUnloadedNotifications = true;
      }
    });
    notificationConnection.start().then(function() {
      notificationConnection.invoke("JoinClass", currentLopHocPhanId.toString());
    });
  }

  // Function để kiểm tra xem có đang ở tab thông báo không
  function isCurrentTabNotices() {
    const noticesTab = document.getElementById('tab-notices');
    const isVisible = noticesTab && noticesTab.style.display !== 'none' && noticesTab.style.display !== '';
    console.log('DEBUG isCurrentTabNotices:', {
      element: !!noticesTab,
      display: noticesTab ? noticesTab.style.display : 'null',
      isVisible: isVisible
    });
    return isVisible;
  }

  // Function để clear nội dung tab notifications khi chuyển sang tab khác
  function clearNotificationsContent() {
    const noticesContainer = document.getElementById('tab-notices');
    if (noticesContainer) {
      noticesContainer.innerHTML = ``;
      console.log('DEBUG: Cleared notifications content');
    }
  }

  // Khởi tạo CKEditor khi DOM loaded
  window.addEventListener('DOMContentLoaded', function() {
    if (document.getElementById('noticeContent')) {
      CKEDITOR.replace('noticeContent');
    }
    if (document.getElementById('editNoticeContent')) {
      CKEDITOR.replace('editNoticeContent');
    }
  });

  // Hàm thêm bình luận
  function addComment() {
    const textarea = document.getElementById('commentText');
    const submitBtn = document.querySelector('.comment-form button[type="submit"]');
    const noiDung = textarea.value.trim();

    if (!noiDung) {
      alert('Vui lòng nhập nội dung bình luận');
      return;
    }

    if (!currentBaiId) {
      alert('Không xác định được bài học để bình luận');
      return;
    }

    if (!submitBtn) {
      alert('Không tìm thấy nút gửi');
      return;
    }

    // Hiển thị loading
    const originalText = submitBtn.textContent;
    const originalStyle = submitBtn.style.cssText;
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin" style="margin-right: 8px;"></i>Đang gửi...';
    submitBtn.style.background = '#6c757d';

    const requestBody = {
      NoiDung: noiDung,
      IdLopHocPhan: currentLopHocPhanId,
      IdBai: currentBaiId
    };

    fetch('/User/ChiTietHocPhan/AddComment', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        },
        body: JSON.stringify(requestBody)
      })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          textarea.value = '';

          // Hiển thị thông báo thành công tạm thời
          submitBtn.innerHTML = '<i class="fas fa-check" style="margin-right: 8px;"></i>Đã gửi!';
          submitBtn.style.background = '#28a745';

          // Reload lại danh sách comments sau delay để đảm bảo data đã được lưu
          setTimeout(() => {
            loadCommentsForLesson(currentBaiId, false); // Load fresh, no scroll maintain
          }, 1000); // 1 giây delay

          // Khôi phục nút về trạng thái ban đầu
          setTimeout(() => {
            submitBtn.innerHTML = originalText;
            submitBtn.style.cssText = originalStyle;
            submitBtn.disabled = false;
          }, 1500);
        } else {
          alert('❌ Lỗi khi gửi bình luận: ' + (data.message || 'Vui lòng thử lại'));
          submitBtn.innerHTML = originalText;
          submitBtn.style.cssText = originalStyle;
          submitBtn.disabled = false;
        }
      })
      .catch(error => {
        console.error('Error adding comment:', error);
        alert('❌ Lỗi kết nối. Vui lòng thử lại');
        submitBtn.innerHTML = originalText;
        submitBtn.style.cssText = originalStyle;
        submitBtn.disabled = false;
      });
  }

  // Function để tìm kiếm sinh viên trong danh sách hiện tại
  function searchStudentsInList(searchTerm) {
    const tableBody = document.getElementById('studentsTableBody');
    const rows = tableBody.getElementsByTagName('tr');

    console.log('Searching students with term:', searchTerm);

    if (!searchTerm.trim()) {
      // Hiển thị tất cả sinh viên khi không có từ khóa tìm kiếm
      for (let i = 0; i < rows.length; i++) {
        rows[i].style.display = '';
        // Remove highlights
        removeHighlights(rows[i]);
      }
      updateSearchResultInfo(rows.length, rows.length);
      return;
    }

    const searchLower = searchTerm.toLowerCase().trim();
    let visibleCount = 0;

    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      const cells = row.getElementsByTagName('td');

      // Bỏ qua row empty state
      if (cells.length < 4) {
        continue;
      }

      // Remove previous highlights
      removeHighlights(row);

      // Lấy text từ các cột: tên đăng nhập, họ tên, email
      const username = cells[0]?.textContent?.toLowerCase() || '';
      const fullName = cells[1]?.textContent?.toLowerCase() || '';
      const email = cells[3]?.textContent?.toLowerCase() || '';
      const phone = cells[4]?.textContent?.toLowerCase() || '';

      // Kiểm tra xem có match với từ khóa tìm kiếm không
      const isMatch = username.includes(searchLower) ||
        fullName.includes(searchLower) ||
        email.includes(searchLower) ||
        phone.includes(searchLower);

      if (isMatch) {
        row.style.display = '';
        visibleCount++;
        // Highlight text matches
        highlightSearchTerm(row, searchTerm);
      } else {
        row.style.display = 'none';
      }
    }

    console.log(`Found ${visibleCount} students matching "${searchTerm}"`);
    updateSearchResultInfo(visibleCount, rows.length);
  }

  // Function để highlight text được tìm kiếm
  function highlightSearchTerm(row, searchTerm) {
    if (!searchTerm.trim()) return;

    const cells = row.getElementsByTagName('td');
    const searchLower = searchTerm.toLowerCase();

    // Highlight trong các cột: tên đăng nhập, họ tên, email, số điện thoại
    [0, 1, 3, 4].forEach(cellIndex => {
      if (cells[cellIndex]) {
        const originalText = cells[cellIndex].textContent;
        const regex = new RegExp(`(${searchTerm})`, 'gi');
        const highlightedText = originalText.replace(regex, '<mark style="background-color: #fff3cd; padding: 1px 3px; border-radius: 3px;">$1</mark>');

        if (originalText.toLowerCase().includes(searchLower)) {
          cells[cellIndex].innerHTML = highlightedText;
        }
      }
    });
  }

  // Function để xóa highlight
  function removeHighlights(row) {
    const cells = row.getElementsByTagName('td');
    [0, 1, 3, 4].forEach(cellIndex => {
      if (cells[cellIndex]) {
        const marks = cells[cellIndex].getElementsByTagName('mark');
        while (marks.length > 0) {
          const mark = marks[0];
          mark.outerHTML = mark.innerHTML;
        }
      }
    });
  }

  // Function để cập nhật thông tin kết quả tìm kiếm
  function updateSearchResultInfo(visibleCount, totalCount) {
    // Tìm hoặc tạo element hiển thị thông tin kết quả
    let resultInfo = document.getElementById('searchResultInfo');
    if (!resultInfo) {
      resultInfo = document.createElement('div');
      resultInfo.id = 'searchResultInfo';
      resultInfo.style.cssText = 'padding: 8px 16px; background: #f8f9fa; border-radius: 6px; margin-bottom: 12px; font-size: 0.9rem; color: #666; border-left: 3px solid #007bff;';

      const tableContainer = document.querySelector('.student-table');
      tableContainer.insertBefore(resultInfo, tableContainer.firstChild);
    }

    const searchInput = document.getElementById('studentSearchInput');
    const searchTerm = searchInput ? searchInput.value.trim() : '';

    if (searchTerm) {
      if (visibleCount === 0) {
        resultInfo.innerHTML = `<i class="fas fa-search"></i> Không tìm thấy sinh viên nào với từ khóa "<strong>${searchTerm}</strong>" trong trang ${currentStudentPage}`;
        resultInfo.style.borderLeftColor = '#dc3545';
        resultInfo.style.color = '#dc3545';
      } else {
        resultInfo.innerHTML = `<i class="fas fa-search"></i> Tìm thấy <strong>${visibleCount}</strong> sinh viên với từ khóa "<strong>${searchTerm}</strong>" trong trang ${currentStudentPage} (tổng số ${totalStudents} sinh viên)`;
        resultInfo.style.borderLeftColor = '#28a745';
        resultInfo.style.color = '#28a745';
      }
      resultInfo.style.display = 'block';
    } else {
      resultInfo.style.display = 'none';
    }
  }

  // Function để clear search
  function clearStudentSearch() {
    const searchInput = document.getElementById('studentSearchInput');

    if (searchInput) {
      searchInput.value = '';
      searchStudentsInList('');
    }

    // Focus lại vào search input
    if (searchInput) {
      searchInput.focus();
    }
  }

  // --- Bình luận realtime ---
  let commentConnection = new signalR.HubConnectionBuilder()
    .withUrl("/notificationHub")
    .build();

  commentConnection.start().then(() => {
    commentConnection.invoke("JoinClass", currentLopHocPhanId.toString());
  });

  commentConnection.on("ReceiveComment", function(comment) {
    addCommentToUI(comment);
  });
  commentConnection.on("UpdateComment", function(comment) {
    updateCommentInUI(comment);
  });
  commentConnection.on("DeleteComment", function(commentId) {
    removeCommentFromUI(commentId);
  });

  // --- UI logic ---
  let allComments = [];
  let visibleCommentCount = 10; // Tăng từ 5 lên 10 để hiển thị nhiều comment hơn

  function renderComments() {
    const list = document.getElementById('commentsList');
    if (!list) {
      return;
    }

    if (!allComments || allComments.length === 0) {
      list.innerHTML = `
        <div style="text-align: center; padding: 40px 20px; color: #6c757d;">
          <i class="fas fa-comments" style="font-size: 48px; margin-bottom: 16px; display: block; color: #dee2e6;"></i>
          <h4 style="margin-bottom: 8px; color: #6c757d; font-weight: 500;">Chưa có bình luận nào</h4>
          <p style="margin: 0; font-size: 0.9rem;">Hãy là người đầu tiên bình luận về bài học này!</p>

        </div>
      `;
      return;
    }

    // Lấy các comment gốc (không phải reply) - hỗ trợ cả camelCase và PascalCase
    const rootComments = allComments.filter(c => !(c.idBinhLuanCha || c.IdBinhLuanCha));

    // Sắp xếp root comments theo thời gian tạo giảm dần (mới nhất lên đầu)
    rootComments.sort((a, b) => {
      const dateA = new Date(a.ngayTao || a.NgayTao || 0);
      const dateB = new Date(b.ngayTao || b.NgayTao || 0);
      return dateB.getTime() - dateA.getTime(); // Descending order (newest first)
    });

    const replyComments = allComments.filter(c => (c.idBinhLuanCha || c.IdBinhLuanCha));
    const visibleComments = rootComments.slice(0, visibleCommentCount);

    const renderedHtml = renderCommentTree(visibleComments, 0);

    list.innerHTML = renderedHtml;

    // Force repaint
    list.style.visibility = 'hidden';
    list.offsetHeight; // Trigger reflow
    list.style.visibility = 'visible';

    // Hiển thị nút "Xem thêm" hoặc "Hiển thị tất cả" nếu còn comment chưa hiển thị
    if (rootComments.length > visibleCommentCount) {
      const remainingCount = rootComments.length - visibleCommentCount;
      list.innerHTML += `
        <div style="text-align: center; margin-top: 20px; padding: 16px; background: #f8f9fa; border-radius: 8px; border: 1px solid #e9ecef;">
          <button class='show-more-btn' onclick='showMoreComments()' style="margin-right: 12px; background: #fff; border: 1px solid #007bff; color: #007bff; padding: 8px 16px; border-radius: 6px; cursor: pointer; transition: all 0.2s; font-weight: 500;" onmouseover="this.style.background='#007bff'; this.style.color='white'; this.style.transform='translateY(-1px)'" onmouseout="this.style.background='#fff'; this.style.color='#007bff'; this.style.transform='none'">
            <i class="fas fa-chevron-down" style="margin-right: 6px;"></i>
            Xem thêm ${remainingCount > 5 ? '5' : remainingCount} bình luận
          </button>
          <button class='show-more-btn primary' onclick='showAllComments()' style="background: linear-gradient(135deg, #007bff 0%, #0056b3 100%); color: white; border: none; padding: 8px 16px; border-radius: 6px; cursor: pointer; transition: all 0.2s; font-weight: 500;" onmouseover="this.style.transform='translateY(-1px)'; this.style.boxShadow='0 4px 8px rgba(0,0,0,0.15)'" onmouseout="this.style.transform='none'; this.style.boxShadow='none'">
            <i class="fas fa-eye" style="margin-right: 6px;"></i>
            Hiển thị tất cả (${rootComments.length})
          </button>
        </div>
      `;
    }

    // Cập nhật số lượng comments trong title
    const commentCountElement = document.getElementById('commentCount');
    if (commentCountElement) {
      commentCountElement.textContent = `(${allComments.length})`;
    }

    // Scroll to comments section if we have comments and it's visible
    if (allComments.length > 0) {
      setTimeout(() => {
        const commentsSection = document.querySelector('.comments-section');
        if (commentsSection) {
          const rect = commentsSection.getBoundingClientRect();
          if (rect.height > 0) {
            commentsSection.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        }
      }, 200);
    }
  }

  function renderCommentTree(comments, level) {
    let html = '';

    for (const c of comments) {
      // Hỗ trợ cả camelCase và PascalCase
      const commentId = c.id || c.Id;
      const parentId = c.idBinhLuanCha || c.IdBinhLuanCha;
      const content = c.noiDung || c.NoiDung || '';
      const authorName = c.hoTen || c.HoTen || c.tenDangNhap || c.TenDangNhap || 'Ẩn danh';
      const avatar = c.avatar || c.Avatar;
      const role = c.role || c.Role || c.vaiTro || c.VaiTro;
      const createdDate = c.ngayTao || c.NgayTao;

      if (!commentId) {
        continue;
      }

      // Logic action buttons theo yêu cầu
      let actionButtons = '';
      const commentUserId = c.idTaiKhoan || c.IdTaiKhoan;
      const isOwnComment = commentUserId === currentUserId;
      const commentAuthorRole = c.role || c.Role || c.vaiTro || c.VaiTro;

      if (userRole === 'Giangvien') {
        // Giảng viên: có thể reply comment của sinh viên, edit comment của mình, xóa tất cả comment
        let buttons = [];

        // Reply chỉ cho comment của sinh viên (KHÔNG reply comment của giảng viên)
        if (commentAuthorRole !== 'Giangvien') {
          buttons.push(`<a title="Phản hồi" class="reply" onclick='replyComment(${commentId})' style="padding: 4px 6px; color: #28a745; background: rgba(40,167,69,0.1); border-radius: 4px; text-decoration: none; font-size: 0.8rem; transition: all 0.2s;" onmouseover="this.style.background='rgba(40,167,69,0.2)'" onmouseout="this.style.background='rgba(40,167,69,0.1)'">
            <i class="fas fa-reply"></i>
          </a>`);
        }

        // Edit chỉ comment của mình
        if (isOwnComment) {
          buttons.push(`<a title="Sửa" class="edit" onclick='editComment(${commentId})' style="padding: 4px 6px; color: #007bff; background: rgba(0,123,255,0.1); border-radius: 4px; text-decoration: none; font-size: 0.8rem; transition: all 0.2s;" onmouseover="this.style.background='rgba(0,123,255,0.2)'" onmouseout="this.style.background='rgba(0,123,255,0.1)'">
            <i class="fas fa-pen"></i>
          </a>`);
        }

        // Xóa tất cả comment (của mình và sinh viên)
        buttons.push(`<a title="Xóa" class="delete" onclick='confirmDeleteComment(${commentId})' style="padding: 4px 6px; color: #dc3545; background: rgba(220,53,69,0.1); border-radius: 4px; text-decoration: none; font-size: 0.8rem; transition: all 0.2s;" onmouseover="this.style.background='rgba(220,53,69,0.2)'" onmouseout="this.style.background='rgba(220,53,69,0.1)'">
          <i class="fas fa-trash"></i>
        </a>`);

        actionButtons = `<span class="comment-actions" style="display: flex; gap: 4px; margin-left: 8px;">${buttons.join('')}</span>`;

      } else if (userRole === 'Sinhvien') {
        // Sinh viên: chỉ edit/xóa comment của mình, KHÔNG có nút reply
        if (isOwnComment) {
          let buttons = [];

          buttons.push(`<a title="Sửa" class="edit" onclick='editComment(${commentId})' style="padding: 4px 6px; color: #007bff; background: rgba(0,123,255,0.1); border-radius: 4px; text-decoration: none; font-size: 0.8rem; transition: all 0.2s;" onmouseover="this.style.background='rgba(0,123,255,0.2)'" onmouseout="this.style.background='rgba(0,123,255,0.1)'">
            <i class="fas fa-pen"></i>
          </a>`);

          buttons.push(`<a title="Xóa" class="delete" onclick='confirmDeleteComment(${commentId})' style="padding: 4px 6px; color: #dc3545; background: rgba(220,53,69,0.1); border-radius: 4px; text-decoration: none; font-size: 0.8rem; transition: all 0.2s;" onmouseover="this.style.background='rgba(220,53,69,0.2)'" onmouseout="this.style.background='rgba(220,53,69,0.1)'">
            <i class="fas fa-trash"></i>
          </a>`);

          actionButtons = `<span class="comment-actions" style="display: flex; gap: 4px; margin-left: 8px;">${buttons.join('')}</span>`;
        }
      }

      // Tạo avatar hoặc chữ cái đầu
      const avatarHtml = avatar ?
        `<img src="${avatar}" class="comment-avatar" alt="Avatar" style="width: 40px; height: 40px; border-radius: 50%; object-fit: cover; flex-shrink: 0;" />` :
        `<div class="comment-avatar-empty" style="width: 40px; height: 40px; border-radius: 50%; background: linear-gradient(45deg, #007bff, #0056b3); color: white; display: flex; align-items: center; justify-content: center; font-weight: 600; font-size: 1.1rem; flex-shrink: 0;">${authorName.charAt(0).toUpperCase()}</div>`;

      // Lấy replies cho comment này - hỗ trợ cả hai format
      const replies = allComments.filter(x => (x.idBinhLuanCha || x.IdBinhLuanCha) === commentId);

      // Sắp xếp replies theo thời gian tạo tăng dần (cũ nhất trước) để duy trì flow hội thoại
      replies.sort((a, b) => {
        const dateA = new Date(a.ngayTao || a.NgayTao || 0);
        const dateB = new Date(b.ngayTao || b.NgayTao || 0);
        return dateA.getTime() - dateB.getTime(); // Ascending order (oldest first)
      });

      // Format thời gian
      const formattedTime = createdDate ? new Date(createdDate).toLocaleString('vi-VN') : '';

      const commentHtml = `
        <div class="comment" id="comment-${commentId}" style="width: 100%; position: relative; z-index: ${10 + level}; overflow: visible; min-height: 60px; display: flex; gap: 12px; padding: 16px; margin-bottom: 16px; background: #fff; border: 1px solid #e9ecef; border-radius: 8px; box-sizing: border-box;">
          ${avatarHtml}
          <div class="comment-main" style="flex: 1; overflow: visible;">
            <div class="comment-header" style="display: flex; align-items: center; gap: 8px; margin-bottom: 8px; flex-wrap: wrap; overflow: visible;">
              <span class="comment-author" style="font-weight: 600; color: #333;">${authorName}</span>
              ${role ? `<span class="comment-role" style="background: ${role === 'Giangvien' ? '#007bff' : '#28a745'}; color: white; padding: 2px 8px; border-radius: 12px; font-size: 0.75rem;">${role === 'Giangvien' ? 'Giảng viên' : 'Sinh viên'}</span>` : ''}
              <span class="comment-time" style="color: #666; font-size: 0.85rem; margin-left: auto;">${formattedTime}</span>
              ${actionButtons}
            </div>
            <div class="comment-body" style="color: #333; line-height: 1.6; word-wrap: break-word; white-space: pre-wrap; overflow: visible;">${content || 'Nội dung trống'}</div>
            ${replies.length > 0 ? `<div class="comment-replies" style="margin-top: 12px; padding-left: 16px; border-left: 2px solid #e9ecef; overflow: visible;">${renderCommentTree(replies, level+1)}</div>` : ''}
          </div>
        </div>
      `;

      html += commentHtml;
    }

    return html;
  }

  function renderCommentActions(c) {
    let html = '';
    // Chỉ Giảng viên mới có quyền sửa/xóa bình luận
    if (userRole === 'Giangvien') {
      if (c.idTaiKhoan === currentUserId) {
        html += `<a title="Sửa" class="edit" onclick='editComment(${c.id})'><i class="fas fa-pen"></i></a>`;
        html += `<a title="Xóa" class="delete" onclick='confirmDeleteComment(${c.id})'><i class="fas fa-trash"></i></a>`;
      } else {
        html += `<a title="Phản hồi" class="reply" onclick='replyComment(${c.id})'><i class="fas fa-reply"></i></a>`;
        html += `<a title="Xóa" class="delete" onclick='confirmDeleteComment(${c.id})'><i class="fas fa-trash"></i></a>`;
      }
    }
    return html;
  }

  function showMoreComments() {
    const oldVisibleCount = visibleCommentCount;
    visibleCommentCount += 5; // Tăng 5 comment mỗi lần
    renderComments();

    // Không cực kỳ cần thiết scroll khi xem thêm vì người dùng đang ở vị trí hiện tại
    // Có thể giữ nguyên vị trí scroll hiện tại
  }

  function showAllComments() {
    const rootComments = allComments.filter(c => !c.idBinhLuanCha);
    visibleCommentCount = rootComments.length; // Hiển thị tất cả comments
    renderComments();

    // Scroll to top để thấy comment mới nhất (vì đã sắp xếp theo thứ tự giảm dần)
    const commentsList = document.getElementById('commentsList');
    if (commentsList) {
      setTimeout(() => {
        commentsList.scrollTop = 0;
      }, 100);
    }
  }

  function addCommentToUI(comment) {
    // Hỗ trợ cả camelCase và PascalCase
    const commentId = comment.id || comment.Id;

    if (!comment || !commentId) {
      return;
    }

    // Kiểm tra xem comment đã tồn tại chưa để tránh duplicate - hỗ trợ cả hai format
    const existingIndex = allComments.findIndex(c => (c.id || c.Id) === commentId);
    if (existingIndex >= 0) {
      // Cập nhật comment hiện có với dữ liệu mới, giữ lại fields quan trọng
      const existingComment = allComments[existingIndex];
      allComments[existingIndex] = {
        ...existingComment,
        // Cập nhật các fields có thể thay đổi
        noiDung: comment.noiDung || existingComment.noiDung,
        ngayTao: comment.ngayTao || existingComment.ngayTao,
        hoTen: comment.hoTen || existingComment.hoTen,
        tenDangNhap: comment.tenDangNhap || existingComment.tenDangNhap,
        avatar: comment.avatar !== undefined ? comment.avatar : existingComment.avatar,
        role: comment.role || existingComment.role
      };
    } else {
      // Thêm comment mới vào đầu danh sách (vì sắp xếp theo thời gian giảm dần)
      allComments.unshift(comment);
    }

    renderComments();

    // Auto scroll to top để thấy comment mới nhất
    const commentsList = document.getElementById('commentsList');
    if (commentsList) {
      setTimeout(() => {
        commentsList.scrollTop = 0;
      }, 100);
    }
  }

  function updateCommentInUI(comment) {
    const idx = allComments.findIndex(c => c.id === comment.id);
    if (idx >= 0) {
      allComments[idx].noiDung = comment.noiDung;
      allComments[idx].ngayTao = comment.ngayTao;
      // Cập nhật thông tin user nếu có
      if (comment.hoTen) allComments[idx].hoTen = comment.hoTen;
      if (comment.tenDangNhap) allComments[idx].tenDangNhap = comment.tenDangNhap;
      if (comment.avatar !== undefined) allComments[idx].avatar = comment.avatar;
      if (comment.role) allComments[idx].role = comment.role;
      renderComments();
    }
  }

  function removeCommentFromUI(commentId) {
    allComments = allComments.filter(c => c.id !== commentId && c.idBinhLuanCha !== commentId);
    renderComments();
  }

  function replyComment(parentId) {
    // Chỉ giảng viên mới có thể reply
    if (userRole !== 'Giangvien') {
      alert('Chỉ giảng viên mới có thể phản hồi bình luận');
      return;
    }

    const parentDiv = document.getElementById('comment-' + parentId);
    if (!parentDiv || parentDiv.querySelector('.reply-form')) return;

    const form = document.createElement('form');
    form.className = 'reply-form';
    form.style.cssText = 'margin-top: 12px; padding: 12px; background: #f8f9fa; border-radius: 6px; border: 1px solid #e9ecef;';
    form.innerHTML = `
      <textarea placeholder='Viết phản hồi...' required style='width: 100%; min-height: 60px; border: 1px solid #ced4da; border-radius: 4px; padding: 8px; font-family: inherit; resize: vertical; box-sizing: border-box;'></textarea>
      <div style='margin-top: 8px; display: flex; gap: 8px; justify-content: flex-end;'>
        <button type='button' onclick='this.closest(".reply-form").remove()' style='padding: 6px 12px; border: 1px solid #6c757d; background: white; color: #6c757d; border-radius: 4px; cursor: pointer;'>Hủy</button>
        <button type='submit' style='padding: 6px 12px; border: none; background: #007bff; color: white; border-radius: 4px; cursor: pointer;'>Gửi phản hồi</button>
      </div>
    `;

    form.onsubmit = function(e) {
      e.preventDefault();
      const noiDung = form.querySelector('textarea').value.trim();
      if (!noiDung) {
        alert('Vui lòng nhập nội dung phản hồi');
        return;
      }

      const submitBtn = form.querySelector('button[type="submit"]');
      const originalText = submitBtn.textContent;
      submitBtn.disabled = true;
      submitBtn.textContent = 'Đang gửi...';

      fetch('/User/ChiTietHocPhan/AddComment', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          NoiDung: noiDung,
          IdLopHocPhan: currentLopHocPhanId,
          IdBinhLuanCha: parentId,
          IdBai: currentBaiId
        })
      }).then(res => res.json()).then(data => {
        if (data.success) {
          form.remove();
          // Reload lại danh sách comments sau khi reply
          if (currentBaiId) {
            loadCommentsForLesson(currentBaiId, true); // Maintain scroll position
          }
        } else {
          alert('Lỗi gửi phản hồi: ' + (data.message || 'Vui lòng thử lại'));
          submitBtn.disabled = false;
          submitBtn.textContent = originalText;
        }
      }).catch(error => {
        console.error('Error replying comment:', error);
        alert('Lỗi kết nối. Vui lòng thử lại');
        submitBtn.disabled = false;
        submitBtn.textContent = originalText;
      });
    };

    // Thêm form reply vào sau comment-main, không phải vào replies
    const commentMain = parentDiv.querySelector('.comment-main');
    if (commentMain) {
      commentMain.appendChild(form);
      // Focus vào textarea
      setTimeout(() => {
        form.querySelector('textarea').focus();
      }, 100);
    }
  }

  function editComment(commentId) {
    const commentDiv = document.getElementById('comment-' + commentId);
    if (!commentDiv || commentDiv.querySelector('.edit-form')) return;

    const cmt = allComments.find(c => (c.id || c.Id) === commentId);
    if (!cmt) {
      alert('Không tìm thấy bình luận để chỉnh sửa');
      return;
    }

    // Kiểm tra quyền edit: chỉ chủ bình luận mới được sửa
    const commentUserId = cmt.idTaiKhoan || cmt.IdTaiKhoan;
    if (commentUserId !== currentUserId) {
      alert('Bạn chỉ có thể chỉnh sửa bình luận của mình');
      return;
    }

    const form = document.createElement('form');
    form.className = 'edit-form';
    form.style.cssText = 'margin-top: 12px; padding: 12px; background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 6px;';
    form.innerHTML = `
      <textarea required style='width: 100%; min-height: 80px; border: 1px solid #ced4da; border-radius: 4px; padding: 8px; font-family: inherit; resize: vertical; box-sizing: border-box;'>${cmt.noiDung || cmt.NoiDung || ''}</textarea>
      <div style='margin-top: 8px; display: flex; gap: 8px; justify-content: flex-end;'>
        <button type='button' onclick='this.closest(".edit-form").remove()' style='padding: 6px 12px; border: 1px solid #6c757d; background: white; color: #6c757d; border-radius: 4px; cursor: pointer;'>Hủy</button>
        <button type='submit' style='padding: 6px 12px; border: none; background: #28a745; color: white; border-radius: 4px; cursor: pointer;'>Lưu thay đổi</button>
      </div>
    `;

    form.onsubmit = function(e) {
      e.preventDefault();
      const noiDung = form.querySelector('textarea').value.trim();
      if (!noiDung) {
        alert('Nội dung bình luận không được để trống');
        return;
      }

      const submitBtn = form.querySelector('button[type="submit"]');
      const originalText = submitBtn.textContent;
      submitBtn.disabled = true;
      submitBtn.textContent = 'Đang lưu...';

      fetch('/User/ChiTietHocPhan/EditComment', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          IdBinhLuan: commentId,
          NoiDung: noiDung
        })
      }).then(res => res.json()).then(data => {
        if (data.success) {
          form.remove();
          // Reload lại danh sách comments sau khi edit
          if (currentBaiId) {
            loadCommentsForLesson(currentBaiId, true); // Maintain scroll position
          }
        } else {
          alert('Lỗi cập nhật bình luận: ' + (data.message || 'Vui lòng thử lại'));
          submitBtn.disabled = false;
          submitBtn.textContent = originalText;
        }
      }).catch(error => {
        console.error('Error editing comment:', error);
        alert('Lỗi kết nối. Vui lòng thử lại');
        submitBtn.disabled = false;
        submitBtn.textContent = originalText;
      });
    };

    const commentBody = commentDiv.querySelector('.comment-body');
    if (commentBody) {
      commentBody.after(form);
      // Focus vào textarea và select all text
      setTimeout(() => {
        const textarea = form.querySelector('textarea');
        textarea.focus();
        textarea.select();
      }, 100);
    }
  }

  function deleteComment(commentId) {
    fetch('/User/ChiTietHocPhan/DeleteComment', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(commentId)
      })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          // Reload lại danh sách comments sau khi xóa
          if (currentBaiId) {
            loadCommentsForLesson(currentBaiId, true); // Maintain scroll position
          }
        }
      })
      .catch(error => {
        console.error('Error deleting comment:', error);
      });
  }



  // --- Lấy bình luận ban đầu khi load bài học ---
  function loadCommentsForLesson(idBai, maintainScrollPosition = false) {
    if (!idBai) {
      return;
    }

    // Lưu scroll position hiện tại nếu cần
    let currentScrollTop = 0;
    const commentsList = document.getElementById('commentsList');
    if (maintainScrollPosition && commentsList) {
      currentScrollTop = commentsList.scrollTop;
    }

    fetch(`/User/ChiTietHocPhan/GetComments?idBai=${idBai}`)
      .then(res => {
        if (!res.ok) {
          throw new Error(`HTTP ${res.status}: ${res.statusText}`);
        }
        return res.json();
      })
      .then(data => {
        if (data.success) {
          allComments = data.data || [];

          // Sắp xếp comments theo thời gian tạo giảm dần (mới nhất lên đầu)
          allComments.sort((a, b) => {
            const dateA = new Date(a.ngayTao || a.NgayTao || 0);
            const dateB = new Date(b.ngayTao || b.NgayTao || 0);
            return dateB.getTime() - dateA.getTime(); // Descending order (newest first)
          });

          // Chỉ reset visibleCommentCount nếu đây là lần load đầu tiên
          if (!maintainScrollPosition) {
            visibleCommentCount = 10; // Tăng số lượng hiển thị mặc định
          }
          renderComments();

          // Khôi phục scroll position hoặc scroll to bottom cho comment mới
          if (maintainScrollPosition && commentsList) {
            setTimeout(() => {
              commentsList.scrollTop = currentScrollTop;
            }, 100);
          } else if (commentsList && allComments.length > 0) {
            // Scroll to top để thấy comment mới nhất (vì đã sắp xếp theo thứ tự giảm dần)
            setTimeout(() => {
              commentsList.scrollTop = 0;
            }, 100);
          }
        } else {
          const commentsList = document.getElementById('commentsList');
          if (commentsList) {
            commentsList.innerHTML = `
              <div style="text-align: center; padding: 20px; color: #e74c3c;">
                <i class="fas fa-exclamation-triangle"></i> 
                Lỗi tải bình luận: ${data.message || 'Không xác định'}
              </div>
            `;
          }
        }
      })
      .catch(error => {
        const commentsList = document.getElementById('commentsList');
        if (commentsList) {
          commentsList.innerHTML = `
            <div style="text-align: center; padding: 20px; color: #e74c3c;">
              <i class="fas fa-exclamation-triangle"></i> 
              Lỗi kết nối: ${error.message}
            </div>
          `;
        }
      });
  }

  let currentBaiId = null;

  function loadCommentsForClass() {
    fetch(`/User/ChiTietHocPhan/GetCommentsByClass?idLopHocPhan=${currentLopHocPhanId}`)
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          allClassComments = data.data;

          // Sắp xếp class comments theo thời gian tạo giảm dần (mới nhất lên đầu)
          allClassComments.sort((a, b) => {
            const dateA = new Date(a.ngayTao || a.NgayTao || 0);
            const dateB = new Date(b.ngayTao || b.NgayTao || 0);
            return dateB.getTime() - dateA.getTime(); // Descending order (newest first)
          });

          renderClassComments();
        }
      });
  }

  let allClassComments = [];

  function renderClassComments() {
    const list = document.getElementById('classCommentsList');
    if (!list) return;

    // Lọc và sắp xếp root comments theo thời gian tạo giảm dần (mới nhất lên đầu)
    const rootComments = allClassComments.filter(c => !c.idBinhLuanCha);
    rootComments.sort((a, b) => {
      const dateA = new Date(a.ngayTao || a.NgayTao || 0);
      const dateB = new Date(b.ngayTao || b.NgayTao || 0);
      return dateB.getTime() - dateA.getTime(); // Descending order (newest first)
    });

    list.innerHTML = renderClassCommentTree(rootComments, 0);
  }

  function renderClassCommentTree(comments, level) {
    let html = '';
    for (const c of comments) {
      // Lấy và sắp xếp replies cho comment này
      const replies = allClassComments.filter(x => x.idBinhLuanCha === c.id);
      replies.sort((a, b) => {
        const dateA = new Date(a.ngayTao || a.NgayTao || 0);
        const dateB = new Date(b.ngayTao || b.NgayTao || 0);
        return dateA.getTime() - dateB.getTime(); // Ascending order (oldest first)
      });

      html += `
        <div class='comment' id='class-comment-${c.id}'>
          ${c.avatar ? `<img src='${c.avatar}' class='comment-avatar' style='width:36px;height:36px;border-radius:50%;'>` : ''}
          <b>${c.hoTen || 'Ẩn danh'}</b>
          <span style='color:#888;font-size:0.9em;'>${c.ngayTao ? new Date(c.ngayTao).toLocaleString('vi-VN') : ''}</span>
          <span style='margin-left:auto;font-size:0.9em;color:#aaa;'>${c.role || ''}</span>
        </div>
        <div class='comment-body' style='margin:8px 0;'>${c.noiDung}</div>
        <div class='replies'>${renderClassCommentTree(replies, level+1)}</div>
      `;
    }
    return html;
  }

  function addClassComment() {
    const textarea = document.getElementById('classCommentText');
    const noiDung = textarea.value.trim();
    if (!noiDung) return;
    fetch('/User/ChiTietHocPhan/AddComment', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        NoiDung: noiDung,
        IdLopHocPhan: currentLopHocPhanId
      })
    }).then(res => res.json()).then(data => {
      if (data.success) {
        textarea.value = '';
        // Reload lại danh sách comments cho class
        loadCommentsForClass();
      }
    });
  }

  // Realtime socket cho bình luận lớp
  commentConnection.on("ReceiveComment", function(comment) {
    if (comment.idLopHocPhan === currentLopHocPhanId) {
      // Thêm comment mới vào đầu danh sách (newest first)
      allClassComments.unshift(comment);
      renderClassComments();
    }
  });

  let currentUserId = @(ViewBag.CurrentUserId ?? 0);
  let userRole = '@(ViewBag.UserRole ?? "")';

  let commentToDelete = null;



  function confirmDeleteComment(id) {
    commentToDelete = id;
    document.getElementById('confirmDeleteModal').style.display = 'flex';
  }

  function closeConfirmDeleteModal() {
    document.getElementById('confirmDeleteModal').style.display = 'none';
    commentToDelete = null;
  }

  function doDeleteComment() {
    if (commentToDelete) {
      deleteComment(commentToDelete);
      closeConfirmDeleteModal();
    }
  }
</script>

@* Handle TempData messages *@
@if (TempData["Success"] != null)
{
<script>
  window.addEventListener('DOMContentLoaded', function() {
    alert('✅ @TempData["Success"]');
    setTimeout(() => {
      if (typeof refreshStudentsList === 'function') {
        refreshStudentsList();
      }
    }, 1000);
  });
</script>
}

@if (TempData["Error"] != null)
{
<script>
  window.addEventListener('DOMContentLoaded', function() {
    alert('❌ @TempData["Error"]');
  });
</script>
}

@if (TempData["Warning"] != null)
{
<script>
  window.addEventListener('DOMContentLoaded', function() {
    alert('⚠️ @TempData["Warning"]');
  });
</script>
}

@if (TempData["Info"] != null)
{
<script>
  window.addEventListener('DOMContentLoaded', function() {
    alert('ℹ️ @TempData["Info"]');
  });
</script>
}

<div id="confirmDeleteModal" class="modal" style="display:none;">
  <div class="modal-content" style="padding:32px; background:#fff; border-radius:12px; text-align:center;">
    <h3>Bạn có chắc chắn muốn xóa bình luận này?</h3>
    <div style="margin-top:18px;">
      <button onclick="closeConfirmDeleteModal()" class="btn-cancel">Hủy</button>
      <button onclick="doDeleteComment()" class="btn-primary" style="background:#e74c3c;">Xóa</button>
    </div>
  </div>
</div>