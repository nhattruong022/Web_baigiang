   @model Lecture_web.Models.ViewModels.SearchBaiGiangViewModel<Lecture_web.Models.ViewModels.BaiGiangViewModel>
@{
ViewData["Title"] = "Quản lý Bai Giang";
Layout = "~/Areas/User/Views/Shared/_Layout.cshtml";

}

@section style
{

    <style>
        /* Chỉ nhắm tới vùng checkbox trong modal edit */
        #lectureClassCheckboxes .form-check {
            display: flex;
            align-items: center;
            margin-bottom: .5rem;
        }

        /* Ép kích thước mặc định cho checkbox */
        #lectureClassCheckboxes .form-check-input {
            width: 1.2rem;
            height: 1.2rem;
            margin-right: .5rem;
            flex-shrink: 0;
        }

        .text-muted {
            color: #6c757d !important;
        }

        .text-danger {
            color: red !important;
        }

        #createContentModal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.4);
            justify-content: center;
            align-items: center;
            z-index: 2000;
        }

            #createContentModal.open {
                display: flex;
            }

            #createContentModal .lecture-modal-content {
                background: #fff;
                border-radius: 8px;
                width: 100%;
                max-width: 550px;
                max-height: 90vh;
                overflow-y: auto;
                box-shadow: 0 8px 24px rgba(0,0,0,0.2);
                position: relative;
                padding: 1.5rem;
            }


            #createContentModal .lecture-modal-header {
                display: flex;
                align-items: center;
                background: #2585e8;
                color: #fff;
                border-top-left-radius: 8px;
                border-top-right-radius: 8px;
                padding: 0.75rem 1rem;
                margin: -1.5rem -1.5rem 1rem;
            }

                #createContentModal .lecture-modal-header i {
                    font-size: 1.4rem;
                    margin-right: 0.5rem;
                }

                #createContentModal .lecture-modal-header h2 {
                    flex-grow: 1;
                    font-size: 1.25rem;
                    margin: 0;
                }

                #createContentModal .lecture-modal-header .close-modal {
                    background: none;
                    border: none;
                    font-size: 1.25rem;
                    color: #fff;
                    cursor: pointer;
                }


        #createLopHocPhanCheckboxes {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 0.5rem 1rem;
            max-height: 200px;
            overflow-y: auto;
            padding: 0.5rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            background: #fafafa;
            margin-top: 0.5rem;
        }

            #createLopHocPhanCheckboxes .form-check {
                display: flex;
                align-items: center;
                padding: 0.4rem 0.6rem;
                border-radius: 4px;
            }

            #createLopHocPhanCheckboxes .form-check-input {
                flex-shrink: 0;
                width: 1.1rem;
                height: 1.1rem;
                margin-right: 0.5rem;
            }

            #createLopHocPhanCheckboxes .text-muted {
                opacity: 0.6;
            }


        #createContentModal .form-actions {
            display: flex;
            justify-content: flex-end;
            margin-top: 1.25rem;
        }

            #createContentModal .form-actions .btn-secondary {
                background: #f0f0f0;
                color: #333;
                margin-right: 0.75rem;
            }

            #createContentModal .form-actions .btn-primary {
                background: #2585e8;
                color: #fff;
            }
   
        .pagination {
            display: flex;
            list-style: none;
            padding: 0;
            margin: 1.5rem 0;
            justify-content: center;
        }

       
            .pagination li {
                margin: 0 0.25rem;
            }

           
                .pagination li a,
                .pagination li span {
                    display: block;
                    padding: 0.5rem 0.75rem;
                    text-decoration: none;
                    border: 1px solid #ddd;
                    border-radius: 4px;
                    color: #007bff;
                    font-weight: 500;
                }

                
                    .pagination li a:hover {
                        background-color: #f1f1f1;
                    }

      
                .pagination li.active span {
                    background-color: #007bff;
                    color: #fff;
                    border-color: #007bff;
                }

          
                .pagination li.disabled span {
                    color: #aaa;
                    border-color: #ddd;
                    cursor: default;
                }

    </style>
}

<div class="content-management-container">
  <div class="content-header">
    <h2>Quản lý bài giảng</h2>
    <div class="content-actions">
      <button class="btn-primary" onclick="openAddContentModal()">
        <i class="fas fa-plus"></i> Thêm bài giảng
      </button>
            <form id="searchForm"
                  method="get" 
                  action='@Url.Action("Index","QuanLyBaiGiang", new { area = "User" })' 
                  class="search-form"
                  style="display:flex; align-items:center; gap:0.5rem;">
                <input type="hidden" name="page" value="1" />
                <input type="text"
                       name="search"
                       value="@Model.SearchTerm"
                       placeholder="Nhập tên bài giảng..."
                       style="flex:1; padding:0.5rem; border:1px solid #ccc; border-radius:4px;" />

                <button type="submit"
                        style="border:none; background:none; cursor:pointer; font-size:1.2rem;">
                    <i class="fas fa-search"></i>
                </button>
            </form>


  </div>
  </div>

  <div class="content-list">
    <table class="content-table" id="contentTable">
      <thead>
        <tr>
          <th>Tên bài giảng</th>
          <th>Mô tả</th>
          <th>Lớp học phần</th>
          <th>Ngày tạo</th>
          <th>Ngày cập nhật</th>
          <th>Thao tác</th>
        </tr>
      </thead>
      <tbody>
        @foreach (var l in Model.Items)
        {
        <tr data-type="lecture">
            <td>@l.TieuDe</td>
            <td>@l.MoTa</td>
            <td>
                @l.LopHocPhan
            </td>
            <td>@l.NgayTao</td>
            <td>@l.NgayCapNhat</td>
            <td class="content-actions-btns">
                <button data-idbg ="@l.IdBaiGiang" class="btn-secondary editbutton" title="Chỉnh sửa"><i class="fas fa-edit"></i></button>
                <button data-idbg ="@l.IdBaiGiang" class="btn-danger deletebutton" title="Xóa"><i class="fas fa-trash"></i></button>
            </td>
        </tr>          
        }
      </tbody>

    </table>
        <nav>
            <ul class="pagination">
                @* Nút Back *@
                @if (Model.CurrentPage > 1)
                {
                    <li>
                        <a href="?page=@(Model.CurrentPage-1)&search=@Model.SearchTerm">«</a>
                    </li>
                }
                else
                {
                    <li class="disabled">
                        <span>«</span>
                    </li>
                }

                @* Các trang số *@
                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    if (i == Model.CurrentPage)
                    {
                        <li class="active"><span>@i</span></li>
                    }
                    else
                    {
                        <li><a href="?page=@i&search=@Model.SearchTerm">@i</a></li>
                    }
                }

                @* Nút Next *@
                @if (Model.CurrentPage < Model.TotalPages)
                {
                    <li>
                        <a href="?page=@(Model.CurrentPage+1)&search=@Model.SearchTerm">»</a>
                    </li>
                }
                else
                {
                    <li class="disabled">
                        <span>»</span>
                    </li>
                }
            </ul>
        </nav>


  </div>
</div>
</main>
</div>

<form id="antiForgeryForm">
    @Html.AntiForgeryToken()
</form>
<!-- Modal thêm mới bài giảng (demo) -->
<div class="modal" id="createContentModal">
    <div class="modal-content lecture-modal-content">
        <div class="modal-header lecture-modal-header">
            <i class="fas fa-chalkboard"></i>
            <h2>Thêm bài giảng mới</h2>
            <button class="close-modal" onclick="closeCreateModal()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <form 
              method="post"
              action="@Url.Action("CreateBaiGiang","QuanLyBaiGiang", new { area="User" })"
              class="modal-form lecture-modal-form"
              id="createContentForm">
            @Html.AntiForgeryToken()
            <div class="form-group">
                <label>Tiêu đề <span class="required">*</span></label>
                <input type="text" name="tieude" class="form-control" />
                <span asp-validation-for="tieude" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label>Mô tả <span class="required">*</span></label>
                <textarea name="mota" class="form-control"></textarea>
                <span asp-validation-for="mota" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label>Lớp học phần <span class="required">*</span></label>
                <div id="createLopHocPhanCheckboxes"
                     style="max-height:200px;overflow-y:auto;border:1px solid #ddd;padding:0.5rem;">
                    <!-- JS sẽ render checkbox ở bước sau -->
                </div>
                <span asp-validation-for="selectedlophocphanids" class="text-danger"></span>
            </div>
            <div class="form-actions">
                <button type="button" class="btn-secondary" onclick="closeCreateModal()">Hủy</button>
                <button type="submit" class="btn-primary">Thêm mới</button>
            </div>
        </form>
    </div>
</div>



<div id="modalPlaceholder"></div>

<!-- Modal chỉnh sửa bài giảng -->
<div class="modal" id="editContentModal">
  <div class="modal-content lecture-modal-content">
    <div class="modal-header lecture-modal-header">
      <i class="fas fa-chalkboard"></i>
      <h2>Chỉnh sửa bài giảng</h2>
      <button class="close-modal" onclick="closeEditContentModal()">
        <i class="fas fa-times"></i>
      </button>
    </div>
    <form method="post"
        action="@Url.Action("LuuBaiGiang","QuanLyBaiGiang", new {area = "User"})"
        class="modal-form lecture-modal-form"
        id="editContentForm">
            @*        onsubmit="event.preventDefault(); saveEditContent(); id="editContentForm"" *@
            @Html.AntiForgeryToken()
      <div class="form-group">
         <input type="hidden" name="idbaigiang" id="editIdBaiGiang"/>
        <label>Tên bài giảng <span class="required">*</span></label>
        <input type="text" name ="tieude" id="editLectureTitle" placeholder="Nhập tên bài giảng">
        <span asp-validation-for="tieude" class="text-danger"></span>
      </div>
      <div class="form-group">
        <label>Mô tả</label>
        <textarea rows="3" name="mota" id="editLectureDesc" placeholder="Nhập mô tả bài giảng"></textarea>
         <span asp-validation-for="mota" class="text-danger"></span>
      </div>
      <div class="form-group">
        <label>Lớp học phần <span>*</span></label>
                <input type="hidden" id="editLectureClass" placeholder="Nhập mã lớp học phần">
@* 
                <select id="editlecturecl" class="form-control" multiple="multiple">
                    
                </select> *@
                <div id="lectureClassCheckboxes" class=""
                     style="max-height:200px; overflow-y:auto; border:1px solid #ddd; padding:0.5rem;">
                    <!-- JS render checkbox ở đây -->
                </div>
      </div>
      <div class="form-actions">
        <button type="button" class="btn-secondary" onclick="closeEditContentModal()">Hủy</button>
        <button type="submit" class="submitBaiGiang btn-primary">Lưu <i class="fas fa-save"></i></button>
      </div>
    </form>
  </div>
</div>
<!-- Modal xác nhận xóa nội dung -->
@* <div class="modal" id="confirmdeletecontentmodal">
  <div class="modal-content">
    <div class="modal-header" style="justify-content:center;">
      <h2 style="font-size:1.1rem; margin:0 auto;">xác nhận xóa</h2>
    </div>
    <div class="modal-form" style="padding:20px;">
      <p>bạn có chắc chắn muốn xóa bài giảng này?</p>
      <div class="modal-actions">
        <button class="btn-secondary" onclick="closeconfirmdeletecontent()">hủy</button>
        <button class="btn-danger" onclick="confirmdeletecontent()">xóa</button>
      </div>
    </div>
  </div>
</div> *@



<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


<script>
    // Chỉnh sửa bài giảng
    $(function () {
        $('.editbutton').on('click', function (e) {
            e.preventDefault();
            var idbg = $(this).data('idbg');
            $.getJSON('@Url.Action("Edit","QuanLyBaiGiang", new {area="User"})', { idbg: idbg }).done(function (data) {
                console.log("Dữ liệu nhận được:", data);
                $('#editIdBaiGiang').val(data.idBaiGiang);
                $('#editLectureTitle').val(data.tieuDe);
                $('#editLectureDesc').val(data.moTa);
                // $('#editLectureClass').val(data.lopHocPhan);

                // var $sel = $('#editLecturecl')
                //     .empty();
                // $.each(data.class, function (_, lp) {
                //     var option = $('<option>')
                //         .val(lp.id)
                //         .text(lp.ten);
                //     if (data.selected.includes(lp.Id)) {
                //         option.prop('selected', true);
                //     }
                //     $sel.append(option);

                var $cbContainer = $('#lectureClassCheckboxes').empty();
                data.class.forEach(function (lp) {
                    var checked = data.selected.includes(lp.id);
                    var disable = data.disable.includes(lp.id);
                    var $lbl = $('<label>').addClass('form-check');
                    var $cb = $('<input>')
                        .attr({
                            type: 'checkbox',
                            name: 'selectlophoc'
                        
                        })
                        .addClass('form-check-input')
                        .val(lp.id)
                        .prop('checked', checked)
                        .prop('disabled', disable);
                    if(disable)
                    {
                        $lbl.addClass('text-muted');
                    }
                    $lbl.append($cb).append(' ' + lp.ten);
                    $cbContainer.append($lbl);

                });
                $('#editContentModal').addClass('open');
            })
                .fail(function () {
                    alert('Không hiển thị được thông tin bài giảng')
                });
        });
    });

    $(function () {
        $('#editContentForm').on('submit', function (e) {
            e.preventDefault();  
            var $form = $(this);
            var token = $form.find('input[name="__RequestVerificationToken"]').val();

            $.ajax({
                url: $form.attr('action'),
                type: 'POST',
                data: $form.serialize(),  
                headers: {
                    'RequestVerificationToken': token
                }
            }).done(function () {
                $('#editContentModal').removeClass('open');
                Swal.fire({
                    icon: 'success',
                    title: 'Cập nhật bài giảng',
                    text: 'Đã cập nhật bài giảng thành công!',
                    timer: 1500,
                    showConfirmButton: false
                }).then(() => {
                    location.reload();
                });

            }).fail(function (eror) {
                if (eror.status === 400 && eror.responseJSON && eror.responseJSON.errors) {
                    var errs = eror.responseJSON.errors;
                    Object.keys(errs).forEach(function (field) {
                        var $span = $form.find('[asp-validation-for="' + field + '"]');
                        if ($span.length) {
                            $span.text(errs[field].join(', '));
                        }
                    });
                } else {
                    alert('Lỗi không xác định');
                }
            });
        });
    });
   


    //Add Bài giảng 

    $(function(){
  // Mở modal Thêm mới
  window.openAddContentModal = function(){
    $('#createLopHocPhanCheckboxes').empty();
            $.getJSON('@Url.Action("GetListClass", "QuanLyBaiGiang", new { area = "User" })')
      .done(function(data){
        data.classes.forEach(function(lp){
          var isDisabled = data.disable.includes(lp.id);
          var $lbl = $('<label>').addClass('form-check')
                                 .toggleClass('text-muted', isDisabled);
          $('<input>').attr({
              type: 'checkbox',
              name: 'selectedlophocphanids',
              value: lp.id,
              disabled: isDisabled
            })
            .addClass('form-check-input')
            .appendTo($lbl);
          $lbl.append(' ' + lp.ten);
          $('#createLopHocPhanCheckboxes').append($lbl);
        });
        $('#createContentModal').addClass('open');
      })
      .fail(function(){ alert('Không tải được danh sách lớp'); });
  };

  // Đóng modal
  window.closeCreateModal = function(){
    $('#createContentModal').removeClass('open');
  };

  // AJAX submit tạo mới
        $('#createContentForm').submit(function (e) {
    e.preventDefault();
    var $f = $(this);


    $.ajax({
      url: $f.attr('action'),
      type: 'POST',
      data: $f.serialize(),
      headers: {
        'RequestVerificationToken': $f.find('input[name="__RequestVerificationToken"]').val()
      }
    })
    .done(function(){
      closeCreateModal();
            Swal.fire({
                icon: 'success',
                title: 'Thêm bài giảng',
                text: 'Thêm mới bài giảng thành công!',
                timer: 1500,
                showConfirmButton: false
            }).then(() => {
                location.reload();
            });
        })
    .fail(function(xhr){
      if (xhr.status === 400 && xhr.responseJSON.errors) {
        var errs = xhr.responseJSON.errors;
        Object.keys(errs).forEach(function(field){
          var $span = $f.find('[asp-validation-for="' + field + '"]');
          if ($span.length) $span.text(errs[field].join(', '));
        });
      } else {
        alert('Có lỗi xảy ra');
      }
    });
  });
});


//Xóa bài giảng

        $(function () {
            // Khi click nút Xóa
            $(document).on('click', '.deletebutton', function (e) {
                e.preventDefault();
                var idbg = $(this).data('idbg');
                if (!idbg) return;
                // Hiển thị SweetAlert2 confirm
                Swal.fire({
                    title: 'Xác nhận xóa ?',
                    text: 'Bạn có chắc chắn muốn xóa bài giảng này?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Chắc chắn xóa',
                    cancelButtonText: 'Hủy',
                    reverseButtons: true
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Lấy token
                        var token = $('#antiForgeryForm input[name="__RequestVerificationToken"]').val();
                        // Gửi AJAX xóa
                        $.ajax({
                            url: '@Url.Action("DeleteBaiGiang", "QuanLyBaiGiang", new { area = "User" })',
                            type: 'POST',
                            data: { idbg: idbg },
                            headers: { 'RequestVerificationToken': token }
                        }).done(function (resp) {
                            // Thông báo thành công
                            Swal.fire({
                                title: 'Đã xóa',
                                text: 'Bài giảng đã được xóa.',
                                icon: 'success',
                                timer: 1500,
                                showConfirmButton: false
                            });
                            // Xóa row khỏi table hoặc reload
                            $('button.deletebutton[data-idbg="' + idbg + '"]').closest('tr').remove();
                        }).fail(function (xhr) {
                            var msg = 'Có lỗi xảy ra khi xóa.';
                            if (xhr.responseJSON && xhr.responseJSON.error) {
                                msg = xhr.responseJSON.error;
                            }
                            Swal.fire({
                                title: 'Lỗi',
                                text: msg,
                                icon: 'error'
                            });
                        });
                    }
                });
            });
        });

    $(function () {
        $('#searchForm').on('submit', function (e) {
            e.preventDefault();

            // Lấy giá trị search và page
            const search = $(this).find('input[name="search"]').val().trim();
            const page = $(this).find('input[name="page"]').val() || '1';

            // Xây URL
            const baseUrl = '@Url.Action("Index", "QuanLyBaiGiang", new { area = "User" })';
            const params = new URLSearchParams();
            if (search.length) params.set('search', search);
            params.set('page', page);

            // Chuyển trang
            window.location.href = baseUrl + '?' + params.toString();

        });
    });

    $(function () {
        if (window.location.search) {
            const baseUrl = '@Url.Action("Index", "QuanLyBaiGiang", new { area = "User" })';
            window.history.replaceState({}, document.title, baseUrl);
        }
    });


</script>

